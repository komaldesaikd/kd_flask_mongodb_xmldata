<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06178508B1.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as first publication">
      <document-id>
        <country>US</country>
        <doc-number>06178508</doc-number>
        <kind>B1</kind>
        <date>20010123</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6178508</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B1</original-publication-kind>
    <application-reference family-id="24318456" extended-family-id="58680689">
      <document-id>
        <country>US</country>
        <doc-number>09031150</doc-number>
        <kind>A</kind>
        <date>19980226</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09031150</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>59977540</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>3115098</doc-number>
        <kind>A</kind>
        <date>19980226</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09031150</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>57981295</doc-number>
        <kind>A</kind>
        <date>19951228</date>
        <priority-linkage-type>3</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1995US-08579812</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010123</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  12/14        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>14</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   1/00        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>00</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  12/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  21/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06F  21/24        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>24</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>713183000</text>
        <class>713</class>
        <subclass>183000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>726019000</text>
        <class>726</class>
        <subclass>019000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-021/40</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>40</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-021/62A</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>021</main-group>
        <subgroup>62A</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-021/62B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>021</main-group>
        <subgroup>62B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06F-021/62B1</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>021</main-group>
        <subgroup>62B1</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/40</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>40</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/6209</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>6209</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/6218</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>6218</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/6227</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>6227</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-2221/2107</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>2221</main-group>
        <subgroup>2107</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06F-221/2107</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>6</number-of-figures>
      <image-key data-format="questel">US6178508</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System for controlling access to encrypted data files by a plurality of users</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CLARK DERECK B</text>
          <document-id>
            <country>US</country>
            <doc-number>5517569</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517569</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>PRESTON HAROLD W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5052040</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5052040</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>LIPNER STEVEN B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5210795</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5210795</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>MICALI SILVIO</text>
          <document-id>
            <country>US</country>
            <doc-number>5276737</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5276737</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>MICALI SILVIO</text>
          <document-id>
            <country>US</country>
            <doc-number>5315658</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5315658</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>HALTER BERNARD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5319705</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5319705</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>FOLLENDORE III ROY D</text>
          <document-id>
            <country>US</country>
            <doc-number>5369707</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5369707</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>KAUFMAN CHARLES W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5373559</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5373559</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>GANESAN RAVI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5394471</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5394471</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>KAUFMAN CHARLES W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418854</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418854</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>JABLON DAVID P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5421006</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5421006</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>KAUFMAN CHARLES W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5497421</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5497421</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>LEIGHTON FRANK T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519778</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519778</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>LEIGHTON FRANK THOMSEN</text>
          <document-id>
            <country>US</country>
            <doc-number>5647000</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5647000</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>KAUFMAN CHARLES WILLIAM</text>
          <document-id>
            <country>US</country>
            <doc-number>5666415</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5666415</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Morris et al., "Password Security: A Case History," Communications of the ACM, vol. 22, No. 11, Nov. 1979, pp. 594-597.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Schneier, "Applied Cryptography: Protocols, Algorithms, and Source Code in C," John Wiley &amp; Sons, Oct. 1993, pp. 28-29.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>57981295</doc-number>
              <kind>A</kind>
              <date>19951228</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5787169</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </division>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corp.</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Kaufman, Charles W.</name>
            <address>
              <address-1>Northborough, MA, US</address-1>
              <city>Northborough</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Kudirka &amp; Jobse, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Swann, Tod R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A system in which an encrypted data file can be protected, accessed, and maintained by a plurality of users using cryptographically hashed passwords.
      <br/>
      The system provides for the creation in memory for each authorized user of a cryptographically hashed password as an entry in an unencrypted header file.
      <br/>
      The system compares an authorized user's cryptographically hashed password against a corresponding set of cryptographically hashed passwords in memory to determine whether the user is allowed access to the protected data file.
      <br/>
      The passwords are cryptographically one-way hashed with a "salt" value in such a way as to make reconstruction of original passwords by an unintended party virtually impossible, because the passwords never exist in memory in an unhashed state.
      <br/>
      Furthermore, the passwords are cryptographically "one-way" hashed so as not to be reconstructible.
      <br/>
      Upon successful authorization of a user, based on successful comparison of the user's hashed password with those in memory, the user gains access to the encrypted data file.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">This application is a divisional application of U.S. PTO Pat. application No. 08/579,812, filed Dec. 28, 1995 now U.S. Pat. No. 5,787,169 which is incorporated herein by reference.</p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="2">This invention relates to computer security and, in particular, to systems in which encrypted information can be protected and maintained by multiple users using passwords.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      Many computer systems utilize some type of security to prevent unauthorized use.
      <br/>
      In the vast majority of systems this security takes the form of a single password per user for a particular company.
      <br/>
      The password is conventionally an arbitrary combination of characters known only to the user.
      <br/>
      The combination of characters is generally encoded in the system as a combination of bits and may be used to control login to the system as well as access to secure information in selected files.
    </p>
    <p num="4">
      In some systems, additional security is provided by requiring two or more users to act in concert in order to access secure information in files.
      <br/>
      In such systems, a group of users must all enter correct passwords in a single session in order to access the information.
      <br/>
      This type of operation is similar to the well-known protocols for the launching of nuclear weapons or financial documents which require two signatures (perhaps an employee and the employee's manager) to be valid.
    </p>
    <p num="5">
      A problem with such multiple user systems is that, if concerted action is needed for access to some information, there is a danger that one of the users required for concerted access to the file will forget his password or leave the company without telling anyone the password and thereby prevent the other remaining users from accessing the secured information.
      <br/>
      In many systems, it is possible to override the security system and obtain access to the information even if all users needed to access the information are not available.
      <br/>
      However, in cryptographic systems where the information is secured by encrypting it, it may not be possible to decrypt the information without all of the passwords.
      <br/>
      In addition, resources which require several users acting in concert are often cumbersome to use simply because it is often difficult to get all of the required users together in order to access the file.
    </p>
    <p num="6">
      One mechanism for avoiding these problems is to allow access to the secured information by a subset, or quorum, of the total group of users.
      <br/>
      For example, if there are five users, any two of the five users can concurrently enter passwords to access the secured data.
      <br/>
      Therefore, if one user forgets his password, leaves the company or is simply not available, a quorum can still be formed of the remaining users in order to access the data.
      <br/>
      This method works well with cryptographic systems because no special precautions need to be taken for lost or forgotten passwords.
    </p>
    <p num="7">
      In such a system, when a user name is entered, a password prompt would appear but two or more passwords would be required.
      <br/>
      Once the passwords were entered, one or more users could leave and let the remaining users work, or if the security constraints mandated, all users might be (administratively) required to remain present until the work was done and the passwords "cleared".
      <br/>
      In either case, a user who left the company in possession of a valid password would find the password useless unless he could get the cooperation of other authorized users.
    </p>
    <p num="8">
      One problem with such quorum systems is that entry of the passwords can be cumbersome.
      <br/>
      Generally each user must enter his name and password.
      <br/>
      The passwords are then combined and the combination is checked against authorized combinations stored in an access file.
      <br/>
      However, if several users must enter passwords and the last person makes a mistake entering his password, then often all users must reenter their passwords.
    </p>
    <p num="9">
      Quorum systems also have problems with maintainability.
      <br/>
      For example, in order to change the size or composition of the possible groups, some method must be provided to obtain combinations of the passwords to form the quorum password combinations.
      <br/>
      Typically, all authorized users must reenter their passwords if a change is made to the size and composition of the quorum groups or if users are added or deleted.
    </p>
    <p num="10">
      Accordingly, there is a need for a security system which is useful for cryptographic systems, but can easily be maintained and can recover if passwords are forgotten.
      <br/>
      There is also a need for a security system in which the entry of passwords is simplified.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="11">
      A secure system is achieved in accordance with the principles of the present invention by utilizing an unencrypted header file which is used to store a username and cryptographically hashed password for each of a plurality of authorized users.
      <br/>
      The passwords in the header file are cryptographically one-way hashed with a "salt value", so as to not be reproducible by an unauthorized party.
      <br/>
      The salt value is a number which is typically unknown and can be the product of, for example, a random number generator.
      <br/>
      One-way hashing means that the actual password can not be recreated by an unintended party, even if the salt value were known.
      <br/>
      The cryptographically hashed passwords are never kept in an unprotected, or unhashed, state in memory, so are not vulnerable to access by an unintended party.
    </p>
    <p num="12">
      During use of the system, an authorized user must enter a password which, when hashed, can be found in the unencrypted header file.
      <br/>
      If the entered password is found in the file, the user is authorized access to the protected encrypted data.
    </p>
    <p num="13">
      Anyone gaining access to the unencrypted header file cannot obtain the passwords themselves.
      <br/>
      And, access to the encrypted data can not be gained without an authorized password.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="14">
      FIG. 1 is a block diagram of a personal computer system suitable for use with the present invention.
      <br/>
      FIG. 2 is a schematic diagram illustrating the some of the contents of a data file secured in accordance with the principles of the invention.
      <br/>
      FIG. 3 is a schematic diagram illustrating apparatus for performing a cryptographic hash of input values.
      <br/>
      FIG. 4 is a schematic diagram illustrating apparatus for performing a cryptographic hash of input values different from that hashing mechanism shown in FIG. 3.
      <br/>
      FIG. 5 is a flowchart illustrating an illustrative method for obtaining the file key used to encrypt the data file illustrated in FIG. 2 by the action of a quorum of users.
      <br/>
      FIG. 6 is a flowchart representing an illustrative method for maintaining the data file of FIG. 2.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="15">
      FIG. 1 illustrates the system architecture for a conventional computer system, such as an IBM PS/2.RTM. computer on which the inventive security system can operate.
      <br/>
      The exemplary computer system of FIG. 1 is for descriptive purposes only.
      <br/>
      Though the description below may refer to terms commonly used in describing particular computer systems, such as an IBM PS/2 computer, the description and concepts equally apply to other systems, including systems having architectures dissimilar to FIG. 1.
    </p>
    <p num="16">
      The exemplary computer 100 includes a central processing unit ("CPU") 105, which may include a conventional microprocessor; a system random access memory ("RAM") 110 for temporary storage of information and a read only memory ("ROM") 115 for permanent storage of information.
      <br/>
      A memory controller 120 is provided for controlling system RAM 110; a bus controller 125 is provided for controlling bus 130; and an interrupt controller 135 is used for receiving and processing various interrupt signals.
    </p>
    <p num="17">
      Mass storage may be provided by a diskette 142, a CD-ROM disk 147 or a hard disk 152.
      <br/>
      The diskette 142 can be inserted into a diskette drive 141, which is, in turn, connected to bus 130 by a controller 140.
      <br/>
      Similarly, the CD-ROM disk 147 can be inserted into a CD-ROM drive 146, which is also connected by a controller 145 to bus 130.
      <br/>
      Finally, hard disks 152 are part of a fixed disk drive 151, which is connected to bus 130 by controller 150.
    </p>
    <p num="18">
      Input and output to computer system 100 are provided by a number of devices.
      <br/>
      For example, a keyboard and mouse controller 155 connects to bus 130 for controlling a keyboard input device 156 and a mouse input device 157.
      <br/>
      A DMA controller 160 is provided for performing direct memory access to system RAM 110.
      <br/>
      A visual display is generated by a video controller 165, which controls a video output display 170.
      <br/>
      The computer also includes a communications adapter 190 which allows the system to be interconnected to a local area network (LAN) or a wide area network (WAN) which is schematically illustrated by bus 191.
    </p>
    <p num="19">
      The computer 100 is generally controlled and coordinated by operating system software, such as the OS/2.RTM. operating system, available from the International Business Machines Corporation ("IBM"), Boca Raton, Fla.
      <br/>
      Conventional operating systems control and schedule computer processes for execution, perform memory management, provide file system, networking, and I/O services, and provide a user interface, such as a graphical user interface ("GUI"), among other things.
      <br/>
      User applications, such as editors and spread sheets, directly or indirectly, rely on these and other capabilities of the operating system.
    </p>
    <p num="20">
      FIG. 2 illustrates the structure of a data file 200 constructed in accordance with the principles of the present invention.
      <br/>
      The file consists of two main sections, although other sections may exist.
      <br/>
      These other sections are not necessary for an understanding of the invention and are omitted from the figure for clarity.
      <br/>
      In particular, the file consists of an unencrypted or "cleartext" header 202 and an encrypted data part 204.
      <br/>
      Although the unencrypted portion and the data portion are shown as two parts of a single file, separate unencrypted and encrypted files could be used without departing from the spirit and scope of the invention.
      <br/>
      Similarly, although table 220 and data portion 222 are shown as part of the encrypted portion 204, they could also be placed in separate files.
    </p>
    <p num="21">
      The cleartext data in the encrypted data portion 204 of the file 200 is encrypted using a single file key in a well-known manner.
      <br/>
      There are several conventional, single key encrypting techniques which could be used to encrypt the file including, but not limited to the DES encoding scheme, the RC2 encoding scheme, the RC4 encoding scheme or the IDEA technique.
      <br/>
      This same encoding technique can also be used to encrypt the secured data portion 222 either as part of the data portion 204 of file 200 or as a separate file.
    </p>
    <p num="22">The single file key used to encrypt the data portion of file 200 is then itself encrypted using the inventive multi-password scheme described in detail below.</p>
    <p num="23">
      The clear text header 202 includes several tables and a randomly-chosen value 206 referred to herein as "salt" stored therein.
      <br/>
      The salt value 206 is typically provided as a randomly-selected value which may be selected using a random number generator of a computer, for example.
      <br/>
      The actual value is not critical, but the salt number should have a sufficient number of bits that the selection of duplicate salt numbers for different files is extremely unlikely.
      <br/>
      Illustratively, a salt value 206 having 64 bits can be used.
    </p>
    <p num="24">
      Also included in unencrypted header 202 is a first table 208 which consists of a plurality of entries with two fields for every entry.
      <br/>
      In particular, each entry has a first field 210 containing a user name and a second field 212 containing a cryptographic hash of the password corresponding to the user name in field 210.
    </p>
    <p num="25">
      In an illustrative embodiment, a password corresponding to a user name is hashed using a one-way cryptographic "hash" of the actual password combined with the salt value.
      <br/>
      In particular, the password can be simply concatenated with the salt value or combined in another manner and then hashed.
    </p>
    <p num="26">
      An illustrative apparatus for generating a cryptographic "hash" of input values is illustrated in FIG. 3, but other, similar arrangements well-known to those in the art can also be used without departing from the scope of the invention.
      <br/>
      In particular, as shown in FIG. 3, the salt value on input 300 and the password on input 304 are provided to a concatenator 302.
      <br/>
      Concatenator 302 simply concatenates the bits forming the salt value with the bits comprising the password and provides the resulting series of bits to a one-way function 306.
    </p>
    <p num="27">
      A one-way function 306 is a well-known function which accepts a series of bits and performs a series of mathematical operations on the bits such that it is substantially impossible, given only the output of the one-way function, to reconstruct the input.
      <br/>
      There are several such functions well-known to those skilled in the art.
      <br/>
      One such function, suitable for use with the illustrative embodiment, is a one-way function called "MD2" which is described in detail in a book entitled Network Security, C. Kaufman, R. Perlman and M. Speciner, Prentice Hall 1995.
      <br/>
      A cryptographic hash is distinct from a key encryption scheme in that the encrypted data can be decrypted with the key.
      <br/>
      However, hashed data cannot be "unhashed."
    </p>
    <p num="28">
      The hashed value generated at the output of function 306 is fed to a second MD2 hash function 308 which implements a second MD2 hash function and provides a second hashed value at an output port thereof.
      <br/>
      It is this second hashed value which is stored in the second field 212 of table 208.
    </p>
    <p num="29">
      The hashing function represented by the two MD2 functions 306 and 308 (FIG. 3) is denoted in FIG. 2 by HASH1�. . . �. The concatenation of two values is indicated by separating the values by two vertical lines (".vertline..vertline.").
      <br/>
      The mechanism shown in FIG. 3 could be preferably implemented by a software routine but could also be implemented in hardware.
      <br/>
      In any case, the routine is part of the permanent file security program.
    </p>
    <p num="30">
      It should be noted that the order of the entries in table 208 establishes an implied order for the passwords.
      <br/>
      For example, the first entry corresponds to password 1, the second entry to password two, etc.
      <br/>
      This order is important because it determines the ordering of the entries in the other tables as will hereinafter be explained.
    </p>
    <p num="31">
      Unencrypted header 202 also includes a second table 214 which also includes a plurality of entries, each of which has two fields 216 and 218.
      <br/>
      There is an entry for each combination of passwords which can be used to form the quorum necessary for decrypting the encrypted portion of the file.
    </p>
    <p num="32">
      For example, assume that there are five authorized administrators and two are required for a quorum.
      <br/>
      Further assume that the five passwords are PW1, PW2, PW3, PW4, and PW5 (the password numbers here refer to the entry orders in table 208 and not the actual order in which the passwords are entered by the users.) Then, since the order of entry does not matter and a password cannot be paired with itself, there are ten possible combinations of two passwords, each of which defines a value combination for a quorum:
    </p>
    <p num="33">
      (1) PW1, PW2
      <br/>
      (2) PW1, PW3
      <br/>
      (3) PW1, PW4
      <br/>
      (4) PW1, PW5
      <br/>
      (5) PW2, PW3
      <br/>
      (6) PW2, PW4
      <br/>
      (7) PW2, PW5
      <br/>
      (8) PW3, PW4
      <br/>
      (9) PW3, PW5
      <br/>
      (10) PW4, PW5
    </p>
    <p num="34">
      Each of these ten combination would have an entry in table 214.
      <br/>
      The first field 216 of each entry is a set of numbers indicating which passwords are in the combination.
      <br/>
      This field consists of the entry numbers for the entries in table 208.
      <br/>
      Thus, for example, if a particular quorum consisted of users with USER NAME1 and USER NAME2 (and corresponding passwords PW1 and PW2, then the entry in the first field of table 214 would be 1, 2.
    </p>
    <p num="35">
      The second field 218 of table 214 consists of the file key encrypted using hashed passwords in the combination.
      <br/>
      In particular, a cryptographic hash for each password in the combination for the entry is generated by concatenating it with the salt value and hashing the concatenation.
      <br/>
      It is important that the hashing technique used in the second operation is different than the hashing technique used in forming table 208 for reasons that will be explained hereinafter.
    </p>
    <p num="36">
      An apparatus for performing the second cryptographic hash is illustrated in FIG. 4, although other well-known techniques could also be used.
      <br/>
      As shown in FIG. 4, the procedure involves applying the salt value on input 400 and a password on input 404 to a concatenation function 406 which concatenates the bits from the two values.
      <br/>
      The output of the concatenator 402 is provided to a one-way function 406.
      <br/>
      As with the previous hashing function, the MD2 hashing function can be used as the one-way function.
      <br/>
      Here the MD2 function is only applied once to make the hashing function different from that used to construct table 208.
      <br/>
      Alternatively, the hashed output could be made different by concatenating the salt/password concatenation with another predetermined constant before passing it through the one-way function or by simply using a one-way function different than MD2.
    </p>
    <p num="37">
      As with table 208, this second hashing function is represented in table 214 by HASH2�. . . � and concatenation is represented by vertical lines (".vertline..vertline.").
      <br/>
      Each hashed concatenation of a password and salt is also represented by a combination number (C1 . . . Cn).
      <br/>
      Therefore C1=HASH2�PW1.vertline..vertline.SALT�; C2=HASH2�PW2.vertline..vertline.SALT�, etc.
    </p>
    <p num="38">
      A password key is then formed of the combination values by concatenating the combination values and hashing the concatenated values with the second hashing function.
      <br/>
      For example, if an entry comprises passwords PW1 and PW2 the cryptographic key would be generated by forming HASH2�HASH2�PW1.vertline..vertline.SALT�.vertline..vertline.HASH2�PW2.vertline..vertline.SALT�� or HASH2�C1.vertline..vertline.C2�. The entries are concatenated in an order based on their ordering in table 208, not on the actual entry order.
      <br/>
      In addition, although the illustrative embodiment uses the hash function HASH2 to has the password combinations another hashing function could also be used.
    </p>
    <p num="39">
      This password key is then used to encrypt the file key.
      <br/>
      Ideally, the encryption process used to encrypt the file key is such that the file key can be easily recovered.
      <br/>
      In accordance with a preferred embodiment, the password key is simply exclusive-ORed with the file key.
      <br/>
      The result of the exclusive-OR operation is then stored in the second field 218 of the table 214.
      <br/>
      When this exclusive-OR function is used the file key can be easily recovered later by generating the password key from combination of entered passwords and exclusive-ORing the generated key with the value stored in the field 218 of the table 214.
    </p>
    <p num="40">
      In order to maintain the password files, it is possible to put the passwords into the encrypted data portion 204 of the file 200.
      <br/>
      However, if this were done, a user may legitimately obtain access to the passwords, but use them improperly in accessing other files, if, as previously mentioned, users use the same passwords in several contexts.
      <br/>
      Consequently, the encrypted data portion 204 of file 200 includes a series of hashed values 220 which are used to maintain the table 214 as will hereinafter be described.
      <br/>
      In particular, the entries in table 220 are the combination values C1 . . . Cn described above.
      <br/>
      Thus, the passwords themselves do not appear in the file.
    </p>
    <p num="41">
      FIG. 5 is a illustrative flowchart illustrating a method for obtaining the file key of an encrypted file which contains the tables illustrated in FIG. 2 by a quorum of users.
      <br/>
      The rectangular elements (typified by element 500), herein denoted "processing blocks," represent computer software instructions or groups of instructions.
      <br/>
      The diamond-shaped elements (typified by element 506), herein denoted "decision blocks," represent computer software instructions or groups of instructions which effect the execution of the computer software instructions represented by the processing blocks.
      <br/>
      The flow diagram does not depict syntax of any particular computer programming language.
      <br/>
      Rather, the flow diagram illustrates the functional information which one of ordinary skill in the art would require to generate computer software to perform the processing required to decrypt an encrypted file structure.
      <br/>
      It should be noted that many routine program elements, such as initialization of loops and variables and the use of temporary variables, are not shown.
    </p>
    <p num="42">
      Turning now to FIG. 5, the program flow starts at 500 and proceeds to processing block 502 where the file header (or header file) is read to extract a list of authorized user names, the "salt" value and hashed passwords.
      <br/>
      The salt value, the user names and hashed passwords are typically extracted from tables such as tables 208 and 214 in the cleartext file header 202 (FIG. 2) and temporarily stored in memory.
      <br/>
      Next, in processing step 504, a list of the extracted user names is displayed, generally on a visual display screen.
      <br/>
      Decision block 506 implements a wait loop which waits for a password to be entered.
      <br/>
      In particular, the routine checks an input/output device such as a keyboard buffer to detect when a password has been entered.
      <br/>
      Alternatively, information may be entered by another equivalent method such as a magnetic stripe reader or other entry device.
      <br/>
      Although the following description describes entry by a keyboard, it is obvious that similar equivalent methods could be used.
      <br/>
      If no password has been entered, then the routine repeats step 506.
    </p>
    <p num="43">
      When a user enters a password, the routine proceeds to processing step 508.
      <br/>
      In step 508, the entered password is concatenated with the retrieved salt value and hashed with the first hashing function to generate HASH1�PW .vertline..vertline.SALT�, as shown in step 508.
    </p>
    <p num="44">
      Decision block 510 checks to see if the hashed password just computed matches any of the hashed passwords retrieved from the file header 202 in step 502.
      <br/>
      If a match is not found, then the password has been entered incorrectly and the routine proceeds to step 512 where an error message is displayed to the user that entered the password.
      <br/>
      The routine then returns to step 504 to redisplay the user names in case an incorrect password was inadvertently entered.
      <br/>
      Not shown are conventional steps that would be taken if incorrect passwords are repeatedly entered.
    </p>
    <p num="45">If, in step 510, the hashed password matches one of the hashed passwords retrieved from table 208 in the header 202 of the file, then processing proceeds to step 516 where a second hashed value of the password concatenated with the salt value is computed using the second hashing function (HASH2�PW.vertline..vertline.SALT�).</p>
    <p num="46">
      Next, in processing step 518, a check is made to determine whether a quorum of authorized users has been obtained.
      <br/>
      This step is performed by comparing the password numbers (based on the table order in table 208) already received with the valid combinations of passwords stored in the first field (216) of table 214.
    </p>
    <p num="47">If the set of password numbers already entered so far does not match one of the valid combinations for a quorum, then the computed hashed values and the password number are stored and processing continues to step 514 where the user name corresponding to the entered password is deleted from the displayed list.</p>
    <p num="48">
      The routine then proceeds back to step 504 where the adjusted list of user names is redisplayed.
      <br/>
      Processing continues by repeating steps 504, 506, 508, 510, 516, 518 and 514 until a quorum is obtained as indicated by the numbers of entered passwords matching one of the password number combinations stored in the first entry of table 214.
    </p>
    <p num="49">
      If, in step 520, it is determined that a quorum exists, then the stored hashed password values are concatenated in the order determined by table 208 and hashed using the second hash function to generate the password key as indicated in step 520.
      <br/>
      Since the concatenation is done by the ordering in table 208, rather than the actual entry order, the passwords to form a quorum can be entered in any order.
      <br/>
      Finally in step 522, the password key is used to decrypt the file key.
      <br/>
      In the illustrative example, step 522 is performed by exclusive-ORing the password key computed in step 520 with the value in the second field 218 in table 214 for the entry whose list (in the first field) matched the list of entered passwords.
      <br/>
      The routine then finishes in step 524.
    </p>
    <p num="50">
      Referring now to FIG. 6, an illustrative routine to add or remove users or change quorum members is disclosed.
      <br/>
      The routine starts in step 600 and proceeds to step 602 in which the encrypted portion of the file is decrypted using the file key obtained using the procedure described above in conjunction with FIG. 5.
      <br/>
      After the encrypted portion of the file is decrypted, the hashed passwords in table 220 (FIG. 2) are read into memory.
      <br/>
      These hashed passwords will be used to rebuild the table 214.
    </p>
    <p num="51">
      Processing then continues to step 606 where a decision is made whether a new user will be added to the group of authorized users.
      <br/>
      If a new user is to be added, then an additional entry must be made in tables 208 and 220 for that user.
      <br/>
      In this case, processing continues to step 608 where the user is instructed to enter a new password.
      <br/>
      The newly entered password is concatenated with the salt value and then hashed using the first and the second hash function as indicated in step 610.
    </p>
    <p num="52">
      The new hashed values are then entered into the appropriate tables 208 (field 212) and table 220 as illustrated in step 612.
      <br/>
      In addition, the new hashed passwords are stored in memory for later rebuilding of the password combination file 214.
      <br/>
      In the case where more than one new user was being added to the group of authorized users, steps 608 and 610 would be repeated for each new user and all of the new user information would be entered into the appropriate tables in step 612.
    </p>
    <p num="53">
      The routine then proceeds to step 614.
      <br/>
      If, in decision box 606, a decision is made that no new users are being entered, the routine also proceeds to step 614.
      <br/>
      In step 614, using any new users and any new quorum rules the table 214 can be rebuilt.
      <br/>
      Since the table 220 is changed by the addition or deletion of users, the data portion of the file is re-encrypted using the same key or a new key, also as indicated in step 614.
      <br/>
      It should be noted that the hashed passwords read from table 220 in step 604 and the new hashed passwords are sufficient to rebuild the table 214 without knowledge of any of the actual passwords.
    </p>
    <p num="54">
      The inventive arrangement provides the following features.
      <br/>
      Since table 208 contains a list of user names and the associated hashed passwords, there is no necessity for users to enter first a user name and then a password.
      <br/>
      Any users whose name appears on the list can enter a password, without a corresponding name and in any order and the routine will recognize valid passwords.
      <br/>
      Further, the routine will recognize a valid combination of passwords regardless of the order in which the passwords are entered.
    </p>
    <p num="55">
      Further, it should be noted that actual passwords do not appear in either the cleartext header of the file or in the encrypted portion of the file.
      <br/>
      Since only passwords passed through a one-way function are found in the file, it is practically impossible to recover the passwords from the file alone.
      <br/>
      Thus, even if users do, in fact, use the same password in different files, with the inventive arrangement, the files will not be compromised.
      <br/>
      While it is possible to rebuild the file key decryption table 214 from the information in the encrypted portion of the file the table 214 cannot be rebuilt from the second field of table 208 because the hashing functions in the two tables are different.
    </p>
    <p num="56">
      Although only one embodiment of the invention has been disclosed, it will be apparent to those skilled in the art that various changes and modifications can be made which will achieve some of the advantages of the invention without departing from the spirit and scope of the invention.
      <br/>
      For example, various well-known encryption techniques can be substituted for those disclosed above to achieve the same results.
      <br/>
      These and other obvious modifications are intended to be covered by the appended claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>Apparatus for controlling access to secured data stored in a memory by a plurality of authorized users, each of whom has a password, the apparatus comprising:</claim-text>
      <claim-text>means for creating in the memory for each authorized user an entry having a cryptographically hashed password including the password of the each user cryptographically hashed with a hashing function; means for receiving a password from one user; means for cryptographically hashing the received password with the hashing function to produce a request value;</claim-text>
      <claim-text>and means responsive to the request value for permitting the one user to access the secured data when the request value matches any of the cryptographically hashed passwords in the memory.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. Apparatus according to claim 1 wherein the means for creating the entries in the memory comprises means for combining each password with a predetermined salt value and means for cryptographically hashing the combination of the salt value and the password with the hashing function.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. Apparatus according to claim 2 wherein the means for hashing the combination of the salt value and the password comprises means for concatenating the salt value and the password.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. Apparatus according to claim 2 wherein the means for cryptographically hashing the combination of the salt value and the password comprises means for passing the combination through a one-way function.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A method for controlling access to secured data stored in a memory by a plurality of authorized users, each of whom has a password, the method comprising: (a) creating in the memory for each authorized user an entry having a cryptographically hashed password including the password of the each user cryptographically hashed with a hashing function; (b) receiving a password from one user; (c) cryptographically hashing the received password with the hashing function to produce a request value;</claim-text>
      <claim-text>and (d) permitting, in response to the request value, the one user to access the secured data when the request value matches any of the cryptographically hashed passwords in the memory.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A method according to claim 5 wherein step (a) comprises: (a1) combining each password with a predetermined salt value;</claim-text>
      <claim-text>and (a2) cryptographically hashing the combination of the salt value and the password with the hashing function.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A method according to claim 6 wherein step (a1) comprises concatenating the salt value and the password.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A method according to claim 6 wherein step (a2) comprises passing the combination through a one-way function.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer program product for controlling access to secured data stored in a memory by a plurality of authorized users, each of whom has a password, the computer program product comprising a computer usable medium having computer readable program code thereon, including: program code for creating in the memory for each authorized user an entry having a cryptographically hashed password including the password of the each user cryptographically hashed with a hashing function; program code for receiving a password from one user; program code for cryptographically hashing the received password with the hashing function to produce a request value;</claim-text>
      <claim-text>and program code for permitting, in response to the request value, the one user to access the secured data when the request value matches any of the cryptographically hashed passwords in the memory.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A computer program product according to claim 9 wherein the program code for creating an entry in the memory for each authorized user comprises: program code for combining each password with a predetermined salt value;</claim-text>
      <claim-text>and program code for cryptographically hashing the combination of the salt value and the password with the hashing function.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A computer program product according to claim 10 wherein the combining program code comprises program code for concatenating the salt value and the password.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A computer program product according to claim 10 wherein the program code for cryptographically hashing the combination comprises program code for passing the combination through a one-way function.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer data signal embodied in a carrier wave for controlling access to secured data stored in a memory by a plurality of authorized users, each of whom has a password, the computer data signal comprising: program code for creating in the memory for each authorized user an entry having a cryptographically hashed password including the password of the each user cryptographically hashed with a hashing function; program code for receiving a password from one user; program code for cryptographically hashing the received password with the hashing function to produce a request value;</claim-text>
      <claim-text>and program code for permitting, in response to the request value, the one user to access the secured data when the request value matches any of the cryptographically hashed passwords in the memory.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A computer data signal according to claim 13 wherein the program code for creating an entry in the memory for each authorized user comprises: program code for combining each password with a predetermined salt value;</claim-text>
      <claim-text>and program code for cryptographically hashing the combination of the salt value and the password with the hashing function.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A computer data signal according to claim 14 wherein the combining program code comprises program code for concatenating the salt value and the password.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A computer data signal according to claim 14 wherein the program code for cryptographically hashing the combination comprises program code for passing the combination through a one-way function.</claim-text>
    </claim>
  </claims>
</questel-patent-document>