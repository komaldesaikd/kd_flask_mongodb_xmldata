<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06178480B1.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as first publication">
      <document-id>
        <country>US</country>
        <doc-number>06178480</doc-number>
        <kind>B1</kind>
        <date>20010123</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6178480</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B1</original-publication-kind>
    <application-reference is-representative="YES" family-id="22929787" extended-family-id="14399546">
      <document-id>
        <country>US</country>
        <doc-number>08870506</doc-number>
        <kind>A</kind>
        <date>19970606</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08870506</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14717052</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>87050697</doc-number>
        <kind>A</kind>
        <date>19970606</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08870506</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>24622094</doc-number>
        <kind>A</kind>
        <date>19940519</date>
        <priority-linkage-type>3</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1994US-08246220</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010123</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   3/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G11B  20/18        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>B</subclass>
        <main-group>20</main-group>
        <subgroup>18</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04N  21/231       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>231</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04N  21/2312      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>H04N  21/2315      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>H04N  21/232       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>232</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>H04N  21/238       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>238</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="8">
        <text>H04N  21/845       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>845</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>711114000</text>
        <class>711</class>
        <subclass>114000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>348E05008</text>
        <class>348</class>
        <subclass>E05008</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-011/10R5</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>011</main-group>
        <subgroup>10R5</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-003/06A2P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>003</main-group>
        <subgroup>06A2P</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-003/06A2R</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>003</main-group>
        <subgroup>06A2R</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06F-003/06A4T6</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>003</main-group>
        <subgroup>06A4T6</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>G06F-003/06A6L4R</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>003</main-group>
        <subgroup>06A6L4R</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>H04N-021/231B</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>231B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="7">
        <text>H04N-021/2312</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
      </classification-ecla>
      <classification-ecla sequence="8">
        <text>H04N-021/2315</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
      </classification-ecla>
      <classification-ecla sequence="9">
        <text>H04N-021/232S</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>232S</subgroup>
      </classification-ecla>
      <classification-ecla sequence="10">
        <text>H04N-021/238P</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>238P</subgroup>
      </classification-ecla>
      <classification-ecla sequence="11">
        <text>H04N-021/845T</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>845T</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/1096</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>1096</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/061</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>061</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/0614</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>0614</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/0659</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>0659</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/0689</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>0689</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-2211/1016</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>2211</main-group>
        <subgroup>1016</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11B-020/1833</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>B</subclass>
        <main-group>20</main-group>
        <subgroup>1833</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/23103</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>23103</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2312</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="10">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2315</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="11">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2326</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2326</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="12">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/23805</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>23805</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="13">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/8456</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>8456</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="14">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S11B-020/18D</classification-symbol>
      </patent-classification>
      <patent-classification sequence="15">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06F-211/10R6</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>5</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>18</number-of-drawing-sheets>
      <number-of-figures>25</number-of-figures>
      <image-key data-format="questel">US6178480</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method for operating an array of video storage units</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>RIPBERGER RICHARD A</text>
          <document-id>
            <country>US</country>
            <doc-number>5502811</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5502811</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>HALE ROBERT P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5502836</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5502836</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>VERDOORN JR WILLIAM G</text>
          <document-id>
            <country>US</country>
            <doc-number>5524204</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5524204</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ARAI KOUJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5564116</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5564116</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>RATHUNDE DALE F</text>
          <document-id>
            <country>US</country>
            <doc-number>5574851</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5574851</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>24622094</doc-number>
              <kind>A</kind>
              <date>19940519</date>
            </document-id>
          </parent-doc>
        </relation>
      </division>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Starlight Networks, Inc.</orgname>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>STARLIGHT NETWORKS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Tobagi, Fouad A.</name>
            <address>
              <address-1>Los Altos, CA, US</address-1>
              <city>Los Altos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Baird, Randall B.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Gang, Jr., Joseph Mark</name>
            <address>
              <address-1>Saratoga, CA, US</address-1>
              <city>Saratoga</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Pang, Joseph W. M.</name>
            <address>
              <address-1>Fremont, CA, US</address-1>
              <city>Fremont</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Proskauer Rose, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Chan, Eddie P.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method for increasing the storage capacity of a video server which utilizes an array of disks is disclosed.
      <br/>
      The server is operated so that the continuity of a plurality of bit streams is maintained.
      <br/>
      The inventive method has advantageous characteristics with respect to storage capacity, streaming capacity, start-up latency of new streams, amount of required buffer capacity, scalability, reliability and multiple bit rates.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>RELATED APPLICATION</heading>
    <p num="1">
      This is a division of application Ser.
      <br/>
      No. 08/246,220, filed May 19, 1994.
    </p>
    <p num="2">
      A patent application entitled METHOD OF OPERATING A DISK STORAGE SYSTEM has been filed for Fouad A. Tobagi, Joseph M. Gang, Jr., Randall B. Baird, Joseph W. M. Pang, and Martin J. McFadden on Nov. 17, 1992, bears Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784 and is assigned to the assignee hereof.
      <br/>
      Another patent application entitled VIDEO APPLICATION SERVER has been filed for James E. Long, Joseph M. Gang, Jr., Charles J. Bedard, Randall B. Baird, and David A. Edwards on Jun. 24, 1993, bears Ser.
      <br/>
      No. 08/082,227, now U.S. Pat. No. 5,550,932 and is assigned to the assignee hereof.
      <br/>
      The above-identified applications contain subject matter related to the subject matter of the present application and are incorporated herein by reference.
    </p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="3">
      The present invention relates to a method for operating a disk storage system which stores video data so as to maintain the continuity of a plurality of video streams.
      <br/>
      In particular, the present invention provides a method for operating a disk storage system which is flexible with respect to storage capacity, streaming capacity, the start up latency of new streams, and the amount of buffer capacity required.
      <br/>
      The inventive method also has advantageous properties with respect to scalability (the addition of more disks), reliability, and multiple bit rates.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      The demand for networked digital audiovisual systems is expected to grow considerably over the next few years as businesses, government and other institutions increasingly turn to digital networks to distribute audiovisual information for education, presentations and reference applications.
      <br/>
      These customers expect systems that will allow a number of people to be able to view audiovisual information from a server simultaneously, while fully retaining their other network functions.
    </p>
    <p num="5">
      The characteristics of files, file access and network traffic in digital video applications differ substantially from those encountered in data applications.
      <br/>
      With data applications, whenever a user makes a file access request to a server, or requests that data be transmitted on a network, the user expects a fast response--fast compared to the time it takes it to place the next request.
      <br/>
      As a result, the capacity of a server and the overall bandwidth must both be large compared to the average demand placed by a single user.
      <br/>
      Accordingly, the design of a file server aimed at supporting data applications and the design of a network to support data traffic have been based on the principle of bandwidth sharing and statistical time multiplexing.
      <br/>
      File servers have furthermore taken advantage of the property of locality in file access, and incorporated appropriate caching mechanisms.
      <br/>
      In all cases, as the overall load on the shared resources increased, the average response time experienced by all users also increased.
    </p>
    <p num="6">
      Consider now digital video.
      <br/>
      A video signal is analog in nature and continuous over time.
      <br/>
      It is digitized by first sampling it at regular intervals, and then by quantizing each sample.
      <br/>
      This digitization process results in a data stream which is of relatively constant and very high rate (NTSC signals result in data rates in the neighborhood of 100 Mb/s and an HDTV signal, 600 Mb/s.) However, given that the sampled data exhibits a great deal of redundancy, compression is applied, thus significantly reducing the stream's rate.
      <br/>
      Depending on the bandwidth of the original analog signal, the sampling rate, the quantization step size, the encoding method, and the desired image quality, the resulting data rate for a digital video signal ranges from 64 Kb/s to tens of Mb/s.
      <br/>
      For example, CCITT Recommendation H.261 specifies video coding and decoding methods for audio visual services at the rate of px64 Kb/s, where p is in the range of 1 to 30 (i.e., 64 Kb/s to 2 Mb/s).
      <br/>
      The MPEG standard specifies a coded representation that can be used for compressing video sequences to bit rates around 1.5 Mb/s. Advances in compression techniques and their VLSI implementations are among the important reasons why video services over LANs and WANs are becoming practical.
    </p>
    <p num="7">
      Two important observations can be made.
      <br/>
      The first is that the volume of bits corresponding to a digitized video segment of useful duration (even compressed) is large.
      <br/>
      A ten minute MPEG video segment requires over 100 Mbytes of storage; ten hours requires over 5 Gbytes.
      <br/>
      Thus video servers where such video information is to be stored must have relatively large storage capacity.
    </p>
    <p num="8">
      The second observation is that the communication of digital video data between two nodes on a local area network (e.g., a server and a desktop station) requires that data be transmitted in a stream fashion.
      <br/>
      This means that video data packets must be delivered to the destination on time, and failure to deliver video data packets on time would result in video quality degradation.
      <br/>
      This has two main implications: (i) from a network's point of view, one requires the availability, on a continuous basis, of a bandwidth at least equal to the signal's data rate; (ii) from a file and storage system point of view, one requires streaming capabilities which guarantee the continuity of each stream being retrieved or stored.
      <br/>
      Thus, in order to support multiple independent video signals, the network must have the necessary aggregate bandwidth as well as means to guarantee the bandwidth required for each video stream, and the file storage system must be of the streaming type and must have a capacity sufficient to handle all video streams.
      <br/>
      By the same token, there is a maximum number of video steams of a given data rate that a network and a server can support, and means are provided to prevent additional requests from overloading the system.
    </p>
    <p num="9">
      It is thus clear that the characteristics of video traffic differ substantially from those of traditional data traffic to the point that servers and local area networks designed primarily to support data applications are not appropriate to effectively support video services.
      <br/>
      New capabilities in servers and networks must be offered.
    </p>
    <p num="10">The focus in this application is on the design and operation of a storage system suitable for a video server, noting again that the storage requirements for video data are different from the storage requirements for typical LAN data in two respects:</p>
    <p num="11">
      (i) the size of video files is an order of magnitude greater or more; even with compression techniques, the physical storage needs are large.
      <br/>
      (ii) when serving a video stream, be it for recording or playback, it is desirable to maintain the continuity of the stream.
      <br/>
      In the case of playback, data must be retrieved from the storage medium, transmitted over the network, and made available to the decoder no later than the time at which it is needed so as to avoid letting the decoder run dry.
      <br/>
      Similarly, when a stream is getting recorded, the writing of data on the storage medium must keep up with the rate at which it is getting produced so as to avoid buffer overflow and data loss.
    </p>
    <p num="12">
      A server's storage system preferably satisfies the following requirements:
      <br/>
      (i) provide random access capability for both recording and playback;
      <br/>
      (ii) have the storage capacity required by the application;
      <br/>
      (iii) have the I/O throughput required to support simultaneously a target maximum number of users (streams); and
      <br/>
      (iv) guarantee a start-up latency for new streams within a specified maximum tolerable threshold.
    </p>
    <p num="13">
      Due to their random access read and write capability, wide availability, and low cost, magnetic disk drives emerge as very appropriate storage components for this purpose.
      <br/>
      Multiple drives can be used in order to provide the necessary storage capacity and/or to achieve an aggregate throughput larger than that achieved with a single drive.
    </p>
    <p num="14">
      A magnetic disk storage system 20 is illustrated in FIG. 1.
      <br/>
      The disk storage system 20 comprises a plurality of disk drives 200.
      <br/>
      Each disk drive 200 comprises a disk 21 and a controller 210.
      <br/>
      The disk drive 200 is shown in greater detail in FIG. 2.
      <br/>
      As shown in FIG. 2, the disk 21 of the disk dive 200 comprises a plurality of platters 22.
      <br/>
      Each platter 22 has one or two magnetic surfaces, a bottom surface 23 and/or a top surface 24, for recording.
      <br/>
      Associated with each recording surface 23 or 24 is a read/write head 26.
      <br/>
      In the disk 21 of FIG. 2, let h denote the number of heads, and thus, usable surfaces.
      <br/>
      The heads 26 are moved to particular locations on the platter surfaces 23, 24 by the actuator 28 which is controlled by a controller 210.
      <br/>
      Thus, the controller 210 controls the proper positions of the read/write heads 26 and the transfer of data in both directions between the magnetic surfaces and a local buffer 30 which forms part of the controller 210.
      <br/>
      The controller 210 also manages the transfer of data across the SCSI bus 220 (see FIG. 1) into and out of a buffer internal to the adapter 230.
      <br/>
      The adapter 230 is then in charge of the transfer of data, via the system bus 250, into and out of the server computer system 26 which includes the memory 260, CPU 270, and network interface 280.
      <br/>
      In the case of a stand-alone system, the computer system 26 may not be a server and may not include a network interface.
    </p>
    <p num="15">
      As shown in FIG. 3, each recording surface 23, 24 is divided into a number of concentric tracks.
      <br/>
      Tracks on all surfaces which are located at the same radius form a cylinder.
      <br/>
      The number of tracks in a cylinder is thus equal to h. Let c denote the number of tracks per surface (and thus also the number of cylinders), and consider the tracks (and thus cylinders) to be numbered sequentially 1, . . . , c, starting with the outer track (cylinder).
      <br/>
      Each track is divided into a number of fixed size sectors.
      <br/>
      Due to the circular geometry of the surface, the number of sectors in a track is not the same for all tracks; there being more sectors in outer tracks than in inner tracks.
    </p>
    <p num="16">
      As shown in FIG. 4, the cylinders in the disk are divided into subsets of contiguous cylinders called zones, such that the number of sectors per track in a zone is the same for all tracks in the zone.
      <br/>
      We let Z denote the number of zones, and consider the zones to be numbered sequentially from 0 to Z-1 starting with the outer zone on the disk.
      <br/>
      In FIG. 4, the number of sectors in a track of zone i is designated  SIGMA i, and the number of cylinders in zone i is designated ki.
      <br/>
      Note that not all disks are organized into zones.
    </p>
    <p num="17">
      The disk rotates permanently at a constant speed of R rotations per minute, and the read/write heads are moved all together from one cylinder to another, as needed.
      <br/>
      All I/O transactions are for an integral number of sectors, the specific number of which depends on the application.
      <br/>
      To limit the overhead caused by head movement when writing or reading a block of data, the sectors on the disk are used consecutively and sequentially, going from sector to sector on a given track, from track to track in a given cylinder, and from cylinder to cylinder.
    </p>
    <p num="18">
      An example of a disk drive is the HP C2240 drive which has h=13 read/write heads, a total of c=2051 cylinders, and rotational speed of R=5400 rotations/minute.
      <br/>
      The 2,051 cylinders comprise 1981 data cylinders, 69 spares, and one for logs and maintenance information.
      <br/>
      They are organized into eight zones.
    </p>
    <p num="19">
      When a request for an I/O operation is placed on the disk storage system (say a read or write operation for some number of consecutive sectors), the heads are first moved under the control of the controller 210 to the cylinder where the first sector is located; the delay incurred in this operation is referred to as the seek time (Xseek) The head corresponding to the appropriate track then waits until the first sector appears under it, incurring a delay referred to as the rotational latency (Xro).
      <br/>
      Once the first sector is located, the head begins reading or writing the sectors consecutively at a rate determined by the rotational speed; the time to read or write all sectors constituting the block is referred to as the transfer time (Xtransfer).
      <br/>
      Note that if the block of data spans sectors located on more than one track is a given cylinder, then a switch from one head to the next is made at the appropriate time, thus incurring a so-called head switch time.
      <br/>
      If the block spans sectors located on multiple cylinders, then a head movement from one cylinder to the next takes place, thus incurring a track-to-track seek time each time this occurs.
      <br/>
      Accordingly, in performing an I/O operation, a certain amount of time is required.
      <br/>
      To assess the performance of a disk supporting an application, an analysis of the time required in each transaction must be undertaken.
    </p>
    <p num="20">The total time required in performing a read or write operation for a block TI/O (block), is the sum of seek time, rotational latency, and transfer time.</p>
    <p num="21">TI/O (block)=Xseek +Xro +Xtrans</p>
    <p num="22">
      FIG. 5 shows how the total time TI/O for a block is divided into, seek time, rotation latency, and transfer time.
      <br/>
      As shown in FIG. 5, the transfer time includes some head switch times and/or track-to-track seek times.
      <br/>
      It should be noted that seek times, rotational delays and transfer times may be random and not known a priori.
    </p>
    <p num="23">
      Note that to get the total time required to get the data transferred into the system's memory, one should also account for any additional time that may be incurred in contending for the SCSI bus and in transferring the data from the controller's buffer to the system's memory.
      <br/>
      However, as these operations take place to a large degree simultaneously with the transfer of data off the disk into the controller's memory, such additional delay is negligible and may be ignored.
    </p>
    <p num="24">
      In the patent application entitled METHOD OF OPERATING A DISK STORAGE SYSTEM filed for Fouad A. Tobagi, Joseph M. Gang, Jr., Randall B. Baird, Joseph W. M. Pang, and Martin J. McFadden on Nov. 17, 1992, bearing Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784, a method for operating a disk storage system comprising one or more disks is described.
      <br/>
      The disk storage system is operated so as to simultaneously maintain the continuity of a plurality of data streams.
      <br/>
      The disk storage system may be located in a network such as a local area network and maintain the continuity of a plurality of streams in the network.
      <br/>
      The network server which includes the video storage system, and a plurality of user stations are connected via a shared transmission medium.
      <br/>
      In this case, a plurality of video streams may be transmitted simultaneously between various users and the server via the shared transmission medium.
      <br/>
      Alternatively, the disk storage system may be part of a stand-alone system in which a plurality of video streams are retrieved from storage and displayed locally on a monitor, or received from an external source and locally stored in the disk storage system. (Thus, the inventive method is described below in connection with a network such as a LAN, but it should be understood that the method of operating a disk storage system is not restricted to use in such a network.
      <br/>
      In addition, it should be noted that the inventive method is described below in connection with an array of disks.
      <br/>
      However, the invention is equally applicable to arrays of other storage units.
      <br/>
      For example, each storage unit may itself be a server and an associated array of disks).
      <br/>
      Disks may be optical disks, magnetic disks, other storage media or instead of disks, random storage media may be used such as semiconductor memories.
      <br/>
      The storage units may also be tape drives.
    </p>
    <p num="25">
      In accordance with the method described in U.S. patent application Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784, I/O transactions take place in I/O cycles.
      <br/>
      For streams produced by (i.e., read out of) the disk storage system, the data is consumed by the network in consumption cycles which follow one another without gaps.
      <br/>
      For streams produced by the network to be written into the disk storage system, the data is produced in production cycles which follow one another without gaps.
    </p>
    <p num="26">
      Illustratively, the disk storage system comprises one disk.
      <br/>
      Each data stream is either produced by the network (e.g., produced by a video coder in the network) at a constant base rate of Wbase bits per second and consumed by the disk, or produced by the disk and consumed by the network (e.g., consumed by a video decoder in the network) at a constant base rate of Wbase bits/sec.
      <br/>
      One I/O transaction is performed for each stream in each of a plurality of successive I/O cycles of duration S/Wbase =Tplay.
      <br/>
      In each I/O transaction, a segment of S bits is stored in or retrieved from the disk.
      <br/>
      Illustratively, Wbase =1.2 Mbits/sec and S=40 Kbytes.
      <br/>
      It should be noted that TI/O, the total time for each I/O transaction (TI/O =Xseek +Xro +Xtrans), is much shorter than Tplay which is the time it takes the network to produce or consume a segment of S bits of a stream.
    </p>
    <p num="27">
      The number of streams whose continuity can be simultaneously maintained is limited by the number of I/O transactions which can be performed in an I/O cycle of duration Tplay.
      <br/>
      This depends on the locations of the retrieved and stored segments in the disk (as TI/O for each transaction depends on the location) as well as the order in which the I/O transactions are scheduled.
    </p>
    <p num="28">
      Two modes of operation can be considered.
      <br/>
      The first mode of operation, known as the synchronous mode is such that the I/O transactions for the active streams are scheduled in a particular predetermined order in each I/O cycle, but the production or consumption cycles of duration Tplay in which the data segments of the active streams are produced or consumed by the network are not necessarily aligned with each other.
    </p>
    <p num="29">
      The second mode of operation is known as the gated operation and is the preferred mode.
      <br/>
      The order of I/O transactions for the active streams may vary from one I/O cycle to the next.
      <br/>
      The advantage of allowing the order of the I/O transactions to vary from cycle to cycle is that the I/O transactions to be performed in a cycle may be sorted according to their locations on the disk so as to minimize the total I/O overhead.
      <br/>
      In order to be able to let the order of I/O's to vary from cycle to cycle, it is important not to allow the consumption of segments fetched in a given I/O cycle to take place earlier than the end of the given I/O cycle or to allow the production of segments to be stored in a given I/O cycle to take place later than the beginning of the given I/O cycle.
      <br/>
      If consumed (produced) at the earliest (latest) time, then the consumption (production) cycle for a segment fetched (stored) in a given I/O cycle for a given stream would coincide with the following (preceding) I/O cycle.
      <br/>
      If this is the case for all streams, then the consumption and production cycles for all streams are aligned with each other, as well as with the I/O cycles.
    </p>
    <p num="30">
      One way of implementing the gated operation described above is as follows: a sequence of I/O cycles of duration Tplay is defined, i.e., T1play, T2play, . . . In each cycle Tiplay, each stream has one I/O transaction.
      <br/>
      In addition, in each cycle Tiplay, for each stream, one data segment S is consumed or produced by the network.
      <br/>
      Segments which are consumed by the disk in cycle Tiplay are produced by the network in I/O cycle Ti-1play.
      <br/>
      Segments which are produced by the disk in cycle Tiplay are consumed by the network in cycle Ti+1play.
      <br/>
      FIG. 6 illustrates the I/O cycles of three streams (stream 1, stream 2, and stream 3) and the corresponding consumption and production cycles.
    </p>
    <p num="31">
      Recall that the advantage of allowing the order of the I/O transactions to vary from cycle to cycle is that the I/O transactions to be performed in a cycle may be sorted according to their locations on the disk so as to minimize the total I/O overhead.
      <br/>
      Such sorting enables the number of I/O transactions performed in an I/O cycle of a given length to be optimized for a given segment size S.
    </p>
    <p num="32">
      To achieve a performance which is not dependent on the particular selection of files being played back or recorded (as pertaining to the location of the files on the disk), the locations of the segments belonging to each file can be randomized over the entire disk.
      <br/>
      The advantage of this is that the total I/O time (TI/O) for any segments fetched in a cycle of duration Tplay is a random variable which is independent of the I/O time of all other segments to be fetched in the same, as well as in other, I/O cycles of duration Tplay.
      <br/>
      As a result, the sum of the I/O times for all segments is the sum of independently and identically distributed random variables.
    </p>
    <p num="33">
      In order to increase the number of streams beyond that which is possible with a single disk, an array of multiple disks may be utilized.
      <br/>
      The number of disks in the array may be designated by Nd.
    </p>
    <p num="34">
      The array of Nd disks (or other storage units) is operated according to the following criteria (in accordance with U.S. patent application Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784 which is incorporated herein by reference).
    </p>
    <p num="35">
      1. Video data is stored and retrieved from each disk in the array in the form of fixed size segments.
      <br/>
      The fixed segment size of S bits simplifies the tasks of storing and retrieving data from the disks, and the tasks of managing the system memory where video data is buffered (e.g., in memory 260 of FIG. 1) before it is stored on the disks or after it is retrieved from the disks.
    </p>
    <p num="36">
      2. Segments belonging to a video stream are striped across the disk array (e.g., consecutive segments are allocated to the disks forming the array in a cyclic fashion).
      <br/>
      Thus, when a video stream is being recorded or played back, all disks in the array are accessed equally and thus incur the same load. (Note that this assumes that all disks have the same storage capacity; otherwise, the disk with the smallest storage capacity dictates the overall storage of the array).
      <br/>
      FIG. 7 is an example of a horizontal stripe.
    </p>
    <p num="37">
      3. Segments within a disk (and thus horizontal stripes within the array) are randomly laid out on the disk (the array).
      <br/>
      Thus, when the disks are of the zoned type, the disk transfer time for a segment belonging to a stream being recorded or played-back is independent of the particular stream in question or the particular segment within that stream.
      <br/>
      Thus, the performance of a disk (and thus the array) in terms of the number of streams that it can serve is independent of the particular streams being served.
      <br/>
      It is not necessary that all the segments which form a stripe across the array have the same physical address in the corresponding disks.
      <br/>
      Rather, segments in each disk can be placed in segment bins independently of the other disks.
    </p>
    <p num="38">
      4. I/O transactions for each disk are scheduled in cycles, whereby the cycle time is equal to the time it takes a stream to consume or generate as many segments as there are disks in the array, assuming, for example, that all streams are of equal constant data rates.
      <br/>
      For each stream being served, one I/O transaction is scheduled for each disk in each cycle.
      <br/>
      Assuming all streams have a production or consumption bit rate Wbase, then the cycle time is Nd S/Wbase, where Nd is the number of disks in the array and S is the segment size.
      <br/>
      This corresponds to the fact that the rate at which data is generated must be equal to the rate at which data is consumed.
      <br/>
      The maximum number of streams Nmax that can be served (maintaining continuity at all times) is equal to the number of I/O transactions that can be performed in a disk in a cycle.
      <br/>
      This in turn depends on the segment size S and how the data is laid out on the disks (e.g. random or not). (Note that if the I/O throughput for all disks is not the same, then the disk with the smallest I/O throughput dictates the serving capacity of all other disks and thus of the disk array.
      <br/>
      Note also that if the data rate for a given stream is different from the nominal rate, then the number of I/O transactions performed in a cycle for that stream may be different from one; if the data rate for a stream is variable over time, then the number of I/O transactions for that stream may vary from cycle to cycle.
      <br/>
      In all cases, to maintain continuity for all streams being served, the number I/O transactions required in each cycle should be smaller than the total number of I/O transactions that can be performed in a cycle).
    </p>
    <p num="39">
      5. By restricting the consumption of segments fetched in a cycle for a play-back stream to begin no earlier than the start of the following cycle, and equivalently, by guaranteeing that the production of data constituting a segment for a stream to be stored is complete prior to the beginning of the cycle during which the corresponding I/O transaction is to take place, it is possible to allow the order of I/O transactions corresponding to the various streams being served to vary from cycle to cycle.
      <br/>
      The advantage of this is to be able to sort the I/O transactions in each cycle according to the location of the corresponding segments on the disk(s), and thus to decrease the overall seek overhead time incurred and thus optimize the number of I/O cycles that can be performed in an I/O cycle.
    </p>
    <p num="40">
      Consider an example shown in FIG. 8, wherein the disk array comprises Nd =2 disks.
      <br/>
      Assume also there are three streams (stream 1, stream 2 and stream 3).
      <br/>
      Each stream has a bit rate S/Wbase, where S is the size of a segment retrieved from a disk and thus, the cycle time is 2S/Wbase.
      <br/>
      Three cycles, cycle i, cycle i+1, and cycle i+2, are shown in FIG. 8.
      <br/>
      In each cycle, there is one I/O transaction for each stream from each disk, for a total of six I/O transactions per cycle.
      <br/>
      The order of the I/O transactions for the two disks is different in cycle i and cycle i+1.
      <br/>
      For example, in cycle i, in disk 1, the order of the I/O transactions is stream 1, stream 3, stream 2 (as indicated by the different shadings used for the different streams).
      <br/>
      Note that the data for stream 1 fetched in cycle i is consumed in cycle i+1 and the data fetched for stream 1 in cycle i+1 is consumed in cycle i+2.
      <br/>
      Similarly, the data for stream 2 fetched in cycle i is consumed in cycle i+1, etc.
    </p>
    <p num="41">
      6. The start-up latency incurred by a play-back stream is a function of the I/O cycle length.
      <br/>
      Indeed, in order to take advantage of sorting, a play-back stream may not begin consumption of the fetched segments before the beginning of the cycle following that in which the segments were fetched.
      <br/>
      Thus, the longer the cycle length, the longer the latency.
    </p>
    <p num="42">
      7. The segment size is an important design variable which affects the system performance, and thus must be selected appropriately.
      <br/>
      The larger the segment size is, the larger is the number of streams of a given data rate that the disk array may serve (as access to the disks becomes more efficient); on the other hand, with the larger segment size and the larger number of streams, the cycle length is larger, and the start-up delay also increases; furthermore, the memory requirements of the buffer to serve all streams increases.
    </p>
    <p num="43">8. The memory requirement is function of the number of disks in the array Nd, the number of users to be served, say Nmax, and the segment size S. With complete partitioning of the memory, the memory requirement is given by 2(Nd) (Nmax)S. With full sharing, the memory requirement is (Nd +1) (Nmax)S. If the number of streams to be served is Na1 &lt;Nmax, then the above equations hold with Nmax replaced by Na1.</p>
    <p num="44">
      As is evident from the above discussion, a disk is characterized by its storage capacity (i.e., the number of segments that can be stored on the disk), and its I/O capacity (i.e., the number of segments that can be stored or fetched in a given period of time).
      <br/>
      Typically disks used in an array such as that described above are identical, in that they all have the same storage capacity, and the same I/O capacity.
    </p>
    <p num="45">
      An alternate scheduling technique disclosed in U.S. patent application Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784 involves dividing the streams into G groups.
      <br/>
      The size of each group may be for example Na1 /G. (Na1 is the number of allowed streams where Na1 &lt;= Nmax).
      <br/>
      The consumption and production cycles of the streams in each group are time aligned with each other, but the consumption and production cycles of each successive group are offset by one (1/G)th of an I/O cycle of duration Nd S/Wbase, FIG. 9 shows the production and consumption cycles for G=8 groups of streams, for the case Nd =4 disks.
    </p>
    <p num="46">
      As shown in FIG. 9, the I/O cycle is divided into G subcycles.
      <br/>
      In each subcycle of length Nd S/Wbase G, the I/O transactions are performed for the group of streams whose production/consumption cycles begin at the end of the particular I/O subcycle.
      <br/>
      The group of I/O transactions performed in each subcycle is sorted separately, for example, alternating between increasing and decreasing order of cylinders so as to minimize seek overhead.
      <br/>
      As Nd =4, the number of I/O transactions for a stream served in each subcycle is four.
      <br/>
      For example, as shown in FIG. 9, for a stream in Group 1, which is served in I/O subcycle -1, there is one segment retrieved from each of the four disks.
      <br/>
      It should be noted that G can be larger than or smaller than Nd.
      <br/>
      This scheduling technique reduces the amount of buffers utilized.
      <br/>
      It should also be noted that in the operation described above, all disks experience the same load.
    </p>
    <p num="47">
      In yet another technique (also disclosed in U.S. patent application Ser.
      <br/>
      No. 07/977,493, now U.S. Pat. No. 5,581,784) for scheduling I/O transactions in each I/O cycle of duration Nd S/Wbase, the streams are again divided into G groups and the size of each group is again, for example, Na1 /G. I/O transactions are performed in subcycles of length Nd S/Wbase G. However, instead of retrieving or storing Nd segments for each stream in an entire group of size Na1 /G, there is retrieved or stored one segment for each stream in Nd groups.
      <br/>
      The segments retrieved or stored are those which begin consumption immediately following the subcycle or which were produced immediately preceding the subcycle.
      <br/>
      This scheduling technique leads to further reduction in the size of the buffer (e.g., the size of memory 260).
      <br/>
      In order to keep the load on all disks balanced during each I/O subcycle, it is desirable to guarantee that the segments to be retrieved or stored for each of the Nd groups served in a subcycle come from separate disks.
    </p>
    <p num="48">
      Consideration is now given to how the disk storage system is able to support streams with different production/consumption rates.
      <br/>
      While dividing the I/O cycle into subcycles can lower buffer requirements, grouping multiple consecutive I/O cycles into a supercycle can accommodate streams with diverse bandwidth requirements.
      <br/>
      Consider a disk storage system comprising Nd disks or other storage units which can support Na1 streams, each of nominal rate Wbase bits/sec.
      <br/>
      The basic scheduling algorithm of fetching one stripe per stream per I/O cycle of duration Nd S/Wbase is now modified to allow fetching multiple stripes per stream per supercycle where a supercycle comprises Nsuper consecutive I/O cycles.
      <br/>
      The number of stripes to be fetched in a supercycle depends on the stream rates.
      <br/>
      This scheduling algorithm can support streams of different rates ranging from a minimum of Wbase /Nsuper bit/sec to a maximum of Na1 Wbase bits/sec with increments of Wbase /Nsuper bits/sec.
      <br/>
      Streams that require rates that do not belong to the above denominations will be assigned a bandwidth of the next higher allowable rates, in which case certain I/O bandwidth is wasted.
      <br/>
      For example, let Nsuper =16, then a stream with rate 1.25 Wbase bits/sec is allowed to fetch 20 stripes per supercycle, a stream with rate 0.125 Wbase bits/sec is allowed to fetch 2 stripes per supercycle, and a stream with rate 0.3 Wbase bits/sec is allowed to fetch 5 stripes per supercycle (although this stream may need to fetch fewer than 5 stripes in some supercycles).
    </p>
    <p num="49">
      To define the scheduling in more precise terms, let Ci be the ith I/O cycle of a typical supercycle where i=1, 2, . . . , Nsuper. For a particular stream, numbered j, Li,j stripes are allowed to be fetched in the ith I/O cycle.
      <br/>
      Clearly, Li,j must be an integer between 0 and Na1.
      <br/>
      To satisfy the disk I/O bandwidth constraint for Ci within a supercycle, the sum of Li,j over all j must not exceed Na1.
      <br/>
      To satisfy the continuity constraint for stream j, the sum of Li,j over i=1, 2, . . . , Nsuper must be greater than or equal to the amount of data, normalized by the stripe size, produced/consumed by stream j in a supercycle.
      <br/>
      To minimize latency and buffer requirements, it is desirable, for each stream j, to minimize the variance among the set of numbers +Li,j } as well as to minimize variance of the  SIGMA /j Li,j for all cycles i. The above criteria serve as the basis for admitting and scheduling the data retrieval of a stream.
    </p>
    <p num="50">
      The choice of Nsuper, depends on a number of considerations.
      <br/>
      A large value of Nsuper provides fine resolution of the streams and hence efficient use of I/O bandwidth.
      <br/>
      However, it increases start-up latency as well as the complexity of the scheduler.
      <br/>
      Thus, Nsuper must be carefully selected for the anticipated mixture of stream rates and tolerable start-up latency.
    </p>
    <p num="51">
      It is an object of the invention to provide an alternative method for operating an array of disks or other storage units.
      <br/>
      In particular, it is an object of the invention to provide a method for operating an array of disks which has greater flexibility with respect to storage capacity, I/O capacity, and latency of new streams, is robust with respect to the addition of new disks and which minimizes buffer capacity.
      <br/>
      It is also an object of the invention to provide a method for operating an array of storage units which has advantageous properties with respect to reliability, scalability and multiple bit rates.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="52">
      The present invention is directed to a method for operating an array of disks or other storage units to maintain the continuity of a plurality of video streams.
      <br/>
      The array of disks comprises Nd disks.
      <br/>
      Video data is stored in the disks or fetched from the disks in segments of size S.
    </p>
    <p num="53">For each method for operating an array of disks according to the invention, it is useful to consider the layout of segments on the disk and the scheduling of I/O transactions within I/O cycles.</p>
    <p num="54">
      Each of the methods is characterized by a storage capacity, a streaming capacity, a latency for new streams, and a buffer requirement but also has some features with respect to reliability and redeployment.
      <br/>
      In general, short I/O cycle techniques have shorter latencies and smaller buffer requirements than long cycle techniques.
      <br/>
      On the other hand, long I/O cycle techniques provide more efficiency for the scheduling of I/O transactions within a cycle, and thus may result in a greater streaming capacity for a given array of disks.
      <br/>
      Therefore, the particular operating method selected may ultimately depend on whether maximization of stream capacity is the ultimate goal, or whether storage capacity is the dominant factor and streaming capacity is sufficient.
    </p>
    <p num="55">
      First, it is useful to consider how the data is laid out on a disk array.
      <br/>
      As is discussed below, sometimes a disk array is divided into sub-arrays.
      <br/>
      Thus, the data striping techniques apply to sub-arrays as well as to the array as a whole.
      <br/>
      Three striping (or sub-striping) techniques may be used.
      <br/>
      For each file, the data is organized into stripes comprising Nd consecutive segments (or sub-stripes comprising Na consecutive segments where Na is the number of disks in a sub-array).
    </p>
    <p num="56">
      The data is stored in the disks so that it is striped across all Nd disks in an array (or sub-striped across all Na disks in a sub-array).
      <br/>
      This may be done in several ways.
      <br/>
      For example:
      <br/>
      1) Each group of Nd or Na consecutive segments from a file is allocated to the disks in the array or sub-array in a regular cycle pattern i.e. , disk 1, disk, 2, . . . disk Nd (or Na) then disk 1, 2, etc.
      <br/>
      All of the segments in a stripe or sub-stripe have the same physical address in the corresponding disks.
      <br/>
      2) Each group of Nd (or Na) consecutive segments from a file are allocated to the disks in the array or (sub-array) in a regular cyclic pattern, but all of the segments in a stripe (or sub-stripe) do not have the same physical address in their respective disks.
      <br/>
      3) Each group of Nd (or Na) segments from a file is placed in the array of Nd disks (or sub-array of Na disks) so that there is one segment on each disk, but the order varies (e.g., randomly) from one stripe (or sub-stripe) to another.
    </p>
    <p num="57">The various embodiments of the invention are now considered.</p>
    <p num="58">I. Wide Array-Short I/O and Consumption Cycles</p>
    <p num="59">
      In this embodiment of the -invention, the data files are striped across the entire array of Nd disks using one of the three formats described above.
      <br/>
      The cycle length is not restricted to Nd S/Wbase.
      <br/>
      Instead, the cycle length is Nd 'S/Wbase where Nd ' is smaller than Nd.
    </p>
    <p num="60">
      The scheduling of I/O transactions with the cycles of length Nd 'S/Wbase may be done in a number of ways.
      <br/>
      In a first technique, each stream of rate Wbase has Nd ' I/O's from Nd ' different disks in each cycle.
      <br/>
      If the rate of a stream is other than Wbase, the number of I/O's for a stream may vary from this.
      <br/>
      For example, if a stream has a bit rate of 1.5 Wbase the number of I/O's for the stream for each cycle alternates between Nd ' and 2Nd ').
      <br/>
      Consumption of segments retrieved from the disk array in one cycle is restricted to begin no earlier than the beginning of the next cycle.
      <br/>
      Similarly, production of segments to be stored in the disk array in one I/O cycle is restricted to end no later than the end of the previous I/O cycle.
      <br/>
      In other words, the gated mode of operation is used.
      <br/>
      This permits the order of the I/O transactions for the various active streams to be different within different I/O cycles.
      <br/>
      In general for each stream, if the data segments are cyclically laid out on the disks, the I/O transactions for each stream are cyclic, i.e., they go from disk to disk in a regular cyclic pattern.
      <br/>
      However, within each I/O cycle there are I/O transactions for many streams and the order of the I/O transactions for the many streams within a cycle may vary.
      <br/>
      The maximum number of streams depends on the number of I/O transactions which can be scheduled within a cycle.
      <br/>
      This depends on the layout of the data in the disk array and the pattern of disk accesses by the users.
    </p>
    <p num="61">
      It should be noted that the cycle length Nd 'S/Wbase does not have to be the same for all streams.
      <br/>
      For different streams or different groups of streams, the value of Nd ' may be different.
    </p>
    <p num="62">
      In an alternative scheduling technique, subcycling may be used.
      <br/>
      For example, the active streams may be divided over G groups.
      <br/>
      The I/O cycles are divided into G subcycles of duration Nd 'S/Wbase G. The consumption and production cycles of the streams in each group are aligned with each other but the consumption and production cycles of each successive group are offset by (1/G)th of an I/O cycle.
      <br/>
      In each subcycle of length Nd S/Wbase G, the I/O transactions are performed for the group of streams whose production/consumption cycles begin at the end of the particular I/O cycle.
      <br/>
      The group of I/O transactions performed in each subcycle is sorted separately to achieve the optimum number of I/O transactions with a subcycle.
      <br/>
      In each subcycle of length Nd S/Wbase G, Nd ' segments are retrieved or stored for all of the streams in one of the G groups.
      <br/>
      Alternatively, in each subcycle, one segment is fetched or stored for all of streams in Nd ' groups.
    </p>
    <p num="63">In yet another scheduling technique, in order to accommodate streams of multiple bit rates supercycling may be used wherein the length of a supercycle is Nsuper Nd 'S/Wbase.</p>
    <p num="64">
      The advantage of using the short cycle technique is that buffer sizes are reduced and that latency is decreased.
      <br/>
      The cost of the short I/O cycle is less efficient with respect to scheduling I/O transactions within an I/O cycle.
      <br/>
      Thus, this technique is preferably used when streaming capacity is satisfactory and storage is the dominant factor.
    </p>
    <p num="65">II. Sub-Arrays-Short I/O and Consumption Cycles</p>
    <p num="66">
      In an alternative embodiment of the invention, the array of Nd disks is organized into sub-arrays, wherein each sub-array comprises two or more disks.
      <br/>
      Preferably each of the disks is identical and the number of disks in each sub-array is the same.
      <br/>
      In some cases, however, the disks in one sub-array may have a different storage capacity, i.e., a different number of storage bins, than the disks in another sub-array.
      <br/>
      The video data segments may be striped across the sub-arrays in a number of different ways.
      <br/>
      For example, the files may be striped across the disks in only one of the sub-arrays.
      <br/>
      Within this sub-array, the striping may be of any of the three forms described above.
      <br/>
      Alternatively, the segments may be striped across the entire array, with sub-stripes allocated cyclically to the different sub-arrays.
      <br/>
      In another alternative, the data is allocated to the disks by randomly allocating sub-stripes to the sub-arrays.
      <br/>
      The number of disks is designated Nd.
      <br/>
      The number of sub-arrays is designated Ns and the number of disks in a sub-array is designated Na.
    </p>
    <p num="67">
      A number of different I/O scheduling techniques may be used in this case.
      <br/>
      For example, in gated operation, the length of an I/O cycle (as well as production and consumption cycles) may be Na S/Wbase.
    </p>
    <p num="68">
      In other words, the length of a production or consumption cycle of a stream with bit rate Wbase is the time it takes the stream to produce or consume a sub-stripe.
      <br/>
      Thus, in each I/O cycle, for each stream of bit rate Wbase, there is one I/O transaction from each of the Na disks in one sub-array so that a sub-stripe is fetched from or written to the one sub-array.
      <br/>
      Depending on how the data is laid out on the disks, in consecutive I/O cycles, for a particular, stream, the I/O transactions may all take place within one sub-array (if the relevant file is striped only across the one sub-array).
      <br/>
      Or, in consecutive I/O cycles, for a particular stream, the I/O transactions may move in a regular cyclical pattern from one sub-array to the next.
      <br/>
      If the sub-stripes of a file are randomly allocated to the sub-arrays, then the I/O transactions for a stream which accesses this file move randomly from one sub-array to another in consecutive I/O cycles.
    </p>
    <p num="69">
      To service a maximum number of users in a sub-array arrangement, it is desirable for groups of streams to be desynchronized from one another, so that in a particular I/O cycle different streams access different sub-arrays.
      <br/>
      If all of the streams are synchronized and access the same sub-array in the same I/O cycle, then the streaming capacity of the entire array is no greater than that of a single sub-array, although the storage capacity is Ns times greater.
    </p>
    <p num="70">
      When sub-arrays are used, sub-cycling and super cycling may also be used.
      <br/>
      For example, a cycle of length Na S/Wbase may be divided into G subcycles.
      <br/>
      In each of the G subcycles, a sub-stripe for all of the streams in one of G stream groups is stored or fetched or one sub-stripe is fetched for all of the streams in Na subgroups.
      <br/>
      Similarly, to handle multiple bit rate streams, a super cycle of length Nsuper Na S/Wbase may be used.
      <br/>
      In each cycle i of the supercycle, for a stream j, Li,j sub-stripes for a stream are fetched or stored depending on the bit rate, where Li,j is an integer.
    </p>
    <p num="71">In general, sub-arrays with short I/O cycles are used where storage capacity is the dominant factor and streaming capacity is sufficient.</p>
    <p num="72">III. Sub-Arrays-Long I/O Cycles, Short Consumption Cycles</p>
    <p num="73">
      There is no a priori reason why the cycle length must be shorter than Nd S/Wbase when sub-arrays are used.
      <br/>
      For example, in particular situations, the cycle length may be longer than Nd S/Wbase.
      <br/>
      Consider the case where the files are striped across the entire disk array and the disk array is organized into Ns sub-arrays.
      <br/>
      In this case, the I/O cycle length may be set to Nd S/Wbase.
      <br/>
      However, the I/O cycle for each sub-array is offset with respect to that of the adjacent sub-array by (1/Ns) of the cycle length.
      <br/>
      The production and consumption cycles of the streams have a length of Na S/Wbase, and produce segments for or consume segments from the Ns sub-arrays in a round robin fashion.
      <br/>
      The consumption of segments fetched from a sub-array is restricted to begin no earlier than the beginning of the next I/O cycle for the sub-array.
      <br/>
      The production of segments to be stored in a sub-array is restricted to end no later than the end of the previous I/O cycle for the sub-array.
    </p>
    <p num="74">This technique is advantageous in that it increases the streaming capacity (long I/O cycle), but suffers from increased latency and increased buffer size (but still smaller than if long consumption/production cycles are used).</p>
    <p num="75">IV. Redeployment and Additional Disks</p>
    <p num="76">
      For all of the foregoing disk array operation methods, it is useful to consider what happens when disks are added.
      <br/>
      In such a case, it is necessary to consider how data is redeployed when new disks are added or what method of operation is to be used after the new disks are added.
    </p>
    <p num="77">The particular redeployment technique and method of operation selected depends on whether the new disks are added to increase streaming capacity (i.e. increases the number of users to be accommodated) or to increase storage capacity in a situation where streaming capacity is sufficient.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWING</heading>
    <p num="78">
      FIG. 1 schematically illustrates a conventional video server including a disk storage system.
      <br/>
      FIG. 2 schematically illustrates a conventional disk drive for use in the system of FIG. 1.
      <br/>
      FIG. 3 illustrates the organization of a recording surface of a conventional disk.
      <br/>
      FIG. 4 illustrates the organization of a recording surface of a conventional disk into zones.
      <br/>
      FIG. 5 illustrates the time required to perform a conventional disk I/O transaction.
      <br/>
      FIG. 6 illustrates the I/O cycles and production and consumption cycles of a disk operated in the gated mode such as described in U.S. Pat. No. 5,581,784.
      <br/>
      FIG. 7 illustrates the conventional manner of striping of data across an array of disks.
      <br/>
      FIG. 8 illustrates a particular scheduling technique for I/O transactions in an array of disks such as described in U.S. Pat. No. 5,581,784.
      <br/>
      FIG. 9 illustrates a scheduling technique for I/O transactions in a disk array involving sub-cycling such as described in U.S. Pat. No. 5,581,784.
      <br/>
      FIGS. 10A and 10B illustrate a first technique for operating a disk array according to the invention.
      <br/>
      FIGS. 11A, 11B, 11C, 11D, 11E illustrate a second technique for operating a disk array according to the invention.
      <br/>
      FIG. 12 illustrates a third technique for operating a disk storage system according to the invention.
      <br/>
      FIGS. 13A, 13B and 13C illustrate a redeployment technique according to the invention.
      <br/>
      FIGS. 14A, 14B and 14C illustrate a second redeployment technique according to the invention.
      <br/>
      FIGS. 15-16 are numerical results for the inventive technique.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="79">The methods for operating a disk access system according to the invention are now considered in greater detail.</p>
    <p num="80">I. Wide Array-Short I/O and Consumption Cycles Method</p>
    <p num="81">
      FIG. 10A shows an array Nd =5 disks.
      <br/>
      FIG. 10A shows how the data from three files are striped across the disks.
      <br/>
      File 1 comprises segments S1-S10.
      <br/>
      These segments are allocated to the disks in a regular cyclic pattern.
      <br/>
      The segments S1-S5 form a first stripe and are assigned to disks 1-5, respectively.
      <br/>
      The respective segments occupy the same physical addresses in the respective disks.
      <br/>
      The segments S6-S10 form a second stripe and are assigned to disks 1-5, respectively.
      <br/>
      The respective segments occupy the same physical addresses in the respective disks.
    </p>
    <p num="82">
      File 2 comprises the segments S1'-S10'. These segments are allocated to the disks in a regular cyclic pattern.
      <br/>
      The segments S1'-S5' form a first stripe and are assigned to disks 1-5 respectively.
      <br/>
      The respective segments within the stripe have different, e.g., randomly assigned, addresses within the disks.
      <br/>
      Similarly, the segments S6'-S10' form a second stripe and are assigned to disks 1-5 respectively.
      <br/>
      The respective segments within the second stripe have different (e.g., randomly assigned) addresses within the respective disks.
    </p>
    <p num="83">
      The File 3 contains the segments S1"-S10".
      <br/>
      The segments S1"-S5" form a first stripe and the segments S6"-S10" form a second stripe.
      <br/>
      There is one segment from the first stripe assigned to each disk and one segment from the second stripe assigned to each disk.
      <br/>
      However, the segments within each stripe are not assigned to the disks according to a regular pattern.
    </p>
    <p num="84">
      FIG. 10B illustrates how I/O cycles are scheduled.
      <br/>
      Illustratively, Nd '=3 so that the cycle length is Nd 'S/Wbase =3S/Wbase.
      <br/>
      Illustratively, there are three streams; stream 1 accesses file 1, stream 2 accesses file 2 and stream 3 accesses file 3.
      <br/>
      FIG. 10B shows the cycles in which particular segments are accessed and the cycles in which the segments are consumed by particular streams.
      <br/>
      For example, in cycle i, segments S1, S3" and S1' are fetched from disk 1, segments S2, and S2' are fetched from disk 2 and segments S3 and S3' are fetched from disk 3.
      <br/>
      The segments S1, S2 and S3 are then consumed by the stream 1 in the cycle i+1.
      <br/>
      The segments S1', S2' and S3' are consumed by the stream 2 in cycle i+1.
    </p>
    <p num="85">
      The striping technique shown for file 3 in FIG. 10A is particularly advantageous because when there are many streams (and also possibly many files) the possibility of synchronized streams is reduced.
      <br/>
      When a large number of streams are synchronized (i.e., have the same pattern of I/O transactions) the number of allowed streams is small.
    </p>
    <p num="86">
      This short cycle technique is especially useful when the streaming capacity of available disks is larger than the required streaming capacity.
      <br/>
      It is also used when it is desired to keep the latency short because a short cycle time means a short latency.
      <br/>
      It is also useful when it is important to keep the buffer requirements low as a short I/O cycle means a smaller buffer.
      <br/>
      In this technique, the number of required-memory buffers is 2Nd ' Na1 with full partitioning and (Nd '+1)Na1 with full sharing, where Na1, the desired number of allowed streams, is smaller than Nmax, the maximum number of streams which can be handled.
    </p>
    <p num="87">
      I. An alternative embodiment of the invention is as follows.
      <br/>
      Consider an array of Nd storage units.
      <br/>
      In general, the data may be allocated to the storage units in stripes of Nd*, Nd* &lt;= Nd segments. (For example, in an array of Nd =6 disks, disk 1, disk 2, disk 3, disk 4, disk 5, disk 6, the data of a particular file may be allocated to Nd* =5 disks such as disk 1, 2, 3, 4, and 5, with a stripe size of five segments so that the data is striped across the five disks).
      <br/>
      The I/O cycles may then be scheduled in cycles of length Nd 'S/Wbase where Nd '&lt;Nd.
    </p>
    <p num="88">II. Sub-Arrays-Short I/O and Consumption Cycles</p>
    <p num="89">FIG. 11A shows an array of Nd =6 disks, labeled disk 1, disk 2, disk 3, . . . , disk 6.</p>
    <p num="90">
      The disks are organized into three sub-arrays labeled SA1, SA2, SA3.
      <br/>
      Thus, the number of sub-arrays is Ns =3.
      <br/>
      The number of disks in each array is Na =2.
      <br/>
      A sub-stripe refers to the segments which are striped across a sub-array.
    </p>
    <p num="91">
      Three files are shown as file 1, file 2 and file 3.
      <br/>
      File 1, comprising segments S1-S12, is striped across the sub-array SA1.
      <br/>
      File 2, comprising segments S1-S12, is striped across all of the arrays.
      <br/>
      File 3 comprises segments S1"-S12".
      <br/>
      The sub-stripes are assigned randomly to the sub-arrays.
    </p>
    <p num="92">
      The basic I/O scheduling algorithm is that the cycle length is Na S/Wbase.
      <br/>
      For a stream of bit rate Wbase, in each I/O cycle, one sub-stripe is retrieved from a sub-array.
      <br/>
      FIG. 11B shows the schedule of I/O transactions for three streams; stream 1 which accesses file 1, stream 2 which accesses file 2, and stream 3 which accesses file 3.
      <br/>
      The production and/or consumption cycles for the streams 1, 2 and 3 are also illustrated.
      <br/>
      A gated mode of operation is used.
      <br/>
      Thus, consumption of sub-stripes is restricted to begin no earlier than the beginning of the next I/O cycle after the I/O cycle in which the sub-stripe is fetched.
      <br/>
      Similarly, the production of a sub-stripe to be written into the array is restricted to end no later than the end of the I/O cycle prior to that in which the sub-stripe will be written to the disk array.
    </p>
    <p num="93">The resulting stream performance (number of users which can be accommodated) depends on</p>
    <p num="94">
      1) deployment of stripes (or sub-stripes)
      <br/>
      2) the particular access pattern (i.e., pattern of files accessed by user)
      <br/>
      3) specific scheduling algorithm
    </p>
    <p num="95">
      As indicated above, optimum performance is achieved when the load is balanced across all the disks.
      <br/>
      If files are allocated to the disks in the manner of file 1, i.e, sub-striped across only one of the sub-arrays, then the stream performance will be very dependent on the access pattern.
      <br/>
      For example, if a lot of users want files stored in sub-array 1 and not many users want the files stored in sub-array 2, then the streaming performance will be limited by the I/O capacity of disks 1 and 2 in sub-array 1.
      <br/>
      On the other hand, if the access pattern is such that equal numbers of users access files in different sub-arrays, then an increased number of streams can be accommodated.
      <br/>
      If all files are like file 3 (random arrangement of substripes to sub-arrays), then in each I/O cycle, there will be on average a balanced load across all sub-arrays.
    </p>
    <p num="96">
      Another factor which effects the stream capacity is as follows.
      <br/>
      Assume the files are striped across the entire array or that sub-stripes are randomly allocated to sub-arrays.
      <br/>
      However, if all of the streams are synchronized so that all the streams want to access sub-array 1 in cycle i, sub-array 2, in cycle i+1, etc. then, the streaming capacity is no greater than the streaming capacity of one sub-array and all that the additional sub-arrays provide is additional streaming capacity.
      <br/>
      What is most desirable is for there to be a plurality of groups of streams which are desynchronized with respect to one another.
      <br/>
      For example, a first group of streams access SA1, while a second group of streams access SA2 and a third group of streams access SA3.
      <br/>
      Such a scheduling algorithm is illustrated in FIG. 11C where G1, G2 and G3 indicate the groups of streams.
      <br/>
      In this manner a high level of streaming capacity is achieved.
    </p>
    <p num="97">In this technique, with full partitioning the buffer requirement is 2Na Na1 and with full sharing it is (Na +1)Na1.</p>
    <p num="98">
      It is also possible to use subcycling in this embodiment of the invention.
      <br/>
      Consider the situation where there are three sub-arrays and G=9 groups of streams.
    </p>
    <p num="99">
      In a first embodiment of subcycling, each cycle of duration Na S/Wbase is divided into G subcycles.
      <br/>
      The I/O transactions of each sub-group take place in one of the subcycles and consumption cycles for the particular subgroup begin immediately after the corresponding I/O subcycle.
      <br/>
      The division of an I/O cycle into G=9 subcycles is shown in FIG. 10D. In each subcycle, the streams in one group access the sub-arrays and one sub-stripe is fetched.
      <br/>
      Consumption cycles for the stream in group G begin immediately after the corresponding subcycle.
      <br/>
      For example, streams in group G1 have their I/O transactions in the first I/O subcycle and the consumption cycle for G1 begins immediately after the first I/O subcycle.
    </p>
    <p num="100">
      In an alternative subcycle scheduling technique, instead of accessing one sub-stripe from each sub-array for all streams in one group (the case of FIG. 11D), there is retrieved one segment for each stream in three groups.
      <br/>
      This scheduling technique is shown in FIG. 11E. In FIG. 11E, the I/O cycle is again divided into G subcycles and the scheduling of groups to sub-arrays for I/O transactions is illustrated.
      <br/>
      In each subcycle, the indicated group accesses a sub-array to fetch or store a sub-stripe.
      <br/>
      For example, group G1 accesses sub-array (SA)1 in subcycle 1, sub-array 3 in subcycle 4 and sub-array 2 in subcycle 7.
      <br/>
      The corresponding consumption of the fetched sub-stripes for G1, G4, and G7 is also illustrated.
      <br/>
      It should be noted that the technique of FIG. 11E is applicable to other kinds of storage units besides sub-arrays.
      <br/>
      For example, the technique is applicable to the case where the storage units are individual disks or other types of random access memory. (In this case in FIG. 11E, SA1, SA2, SA3, represent storage units other than sub-arrays).
    </p>
    <p num="101">III. Sub-Arrays, Long I/O Cycles, Short Consumption Cycles</p>
    <p num="102">As indicated above, it is also possible to operate a disk array comprising Nd disks organized into sub-arrays using a long I/O cycle.</p>
    <p num="103">
      In this case, the data is assumed to be striped across the entire array.
      <br/>
      In this case, the I/O cycles have a length Ns Na S/Wbase.
      <br/>
      However, the I/O cycles of the different sub-arrays are offset by 1/Ns of an I/O cycle from each other.
      <br/>
      The consumption and production cycles of the streams have a duration Na S/Wbase.
      <br/>
      However, consumption is restricted to begin no earlier than after the end of the I/O cycle in which the data is fetched.
      <br/>
      Similarly, production is restricted to end no later than the beginning of the I/O cycle in which the data is written.
      <br/>
      FIG. 12 shows an example in which there are four disks, labeled disk 1, disk 2, disk 3 and disk 4.
      <br/>
      There are also five users or user groups labeled user 1, user 2, user 3, user 4, and user 5.
    </p>
    <p num="104">
      Recall that in the Wide Array-Short I/O and Consumption Cycles Method, the number of required memory buffers is 2 (Nd ') (Na1) with full partitioning and (Nd '+1) (Na1) with full sharing.
      <br/>
      In the Sub-Array-Long I/O Cycles Short Consumption Cycles Method with Ns sub-arrays, the consumption cycles are each equal to Na S/Wbase and the number of buffers with full partitioning is (Ns +1)Na Na1 =(Nd +Na)Na1. Furthermore, by considering the consumption cycles to correspond to a single segment (Na =1), the I/O cycles for the Ns =Nd sub-arrays of Na =1 disks are offset with respect to each other by a period of time equal to the consumption of a single segment and the minimum memory requirement under this scheme with full partitioning is reached and is given by (Nd +1) (Na1).
    </p>
    <p num="105">
      If maximizing the number of streams to be served is not the objective, then it is possible to decrease the amount of buffering required below the amount obtained by operating the array as described above (which is (Nd +Na)Na1, where Na1 &lt;Nmax is the desired number of streams).
      <br/>
      Indeed, if Na1 is restricted to fNmax, where f&lt;1, then only f of an I/O cycle is required to perform the necessary I/O's, and by restricting consumption to begin no earlier than the end of the fraction f of the I/O cycle in which data has been fetched, the buffer requirement can be reduced to below (Ns +1) (Na) (Na1) For example, for Ns =2, the buffer requirement is (2+f) (Na) (Na1).
    </p>
    <p num="106">In general, the number Nmax differs for the various techniques but Na1 can be set at a desired number less than Nmax for a particular technique.</p>
    <p num="107">IV. Redeployment</p>
    <p num="108">
      To increase the storage capacity of an existing array which operates according to one of the inventive techniques, or according to the technique described in U.S. patent application Ser.
      <br/>
      No. 07/977,493 now U.S. Pat. No. 5,581,784 new disks are added.
      <br/>
      The new disks may or may not be identical to the original ones (i.e., may or may not have the same storage and I/O capacities); and may or may not be identical to each other.
      <br/>
      However, for purposes of clarity, in the examples which follow, the following issues are considered.
      <br/>
      (a) how to organize the entire set of disks, old and new;
      <br/>
      (b) how to redeploy the data that was already stored on the original array over the entire system; and
      <br/>
      (c) how to operate the new system in order to meet the same continuity requirements underlying the serving video streams.
    </p>
    <p num="109">
      A. Adding New Disks to Make the Array Wider
      <br/>
      (a) The new disks are added to the original array so as to form a wider array.
      <br/>
      The new array is of width Nold +Nnew =Ntotal
      <br/>
      (b) The segments are redeployed so as to be striped across all disks.
      <br/>
      (c) The new array may then be operated according to one of the techniques described above.
    </p>
    <p num="110">Because the goal behind redeployment of the segments is to achieve load balancing, it is important to make sure that for each stream, in any set of Nold +Nnew =Ntotal consecutive segments, there is one segment on each disk.</p>
    <p num="111">This may be accomplished using one of the following redeployment methods.</p>
    <p num="112">Redeployment Method A1</p>
    <p num="113">
      In this redeployment method, stripes are redeployed by physically moving them to accommodate the new disks.
      <br/>
      The array is re-striped on a file-by-file basis.
      <br/>
      Each file can be considered to be an array of segments reorganized into larger stripes.
      <br/>
      The ith, i=0, 1, 2 . . . , new stripe for the new, larger array is made by copying segments Ntotal* (i-1)+i through Ntotal* i to the new stripe.
      <br/>
      Because the new array is larger than the old array, there is no possibility that the copying of the segments will overwrite data that hasn't yet been copied.
      <br/>
      The resultant set of segments for the file contains fewer stripes than the old array did.
      <br/>
      Any stripes that were allocated to the file that are no longer needed are returned to the free list.
    </p>
    <p num="114">
      This redeployment method results in a system where the location of a segment merely requires the maintenance of a map of stripes for each file.
      <br/>
      Locating the ith segment is accomplished by walking through the map entries for the first .left brkt-bot.i/Ntotal.right brkt-bot. stripes for the specified file, then addressing the i mod Ntotal segment.
      <br/>
      The stripe map entries are extremely simple in structure. (The brackets .left brkt-bot..right brkt-bot. indicate "integer part of".)
    </p>
    <p num="115">
      The major drawback to this scheme is that while the stripes are being copied, the array is vulnerable to corruption should the redeployment fail for some reason.
      <br/>
      To solve this problem, the progress of the redeployment needs to be carefully logged on the array.
      <br/>
      To maintain complete fault-tolerance, each stripe requires a log operation, resulting in extremely long redeployment times.
      <br/>
      An alternative to this would be to log the redeployment of each separate file, but this will result in a single file being corrupted should the redeployment crash.
    </p>
    <p num="116">Redeployment Method A2</p>
    <p num="117">
      A second redeployment method relies on the fact that a "stripe" need not be made up of segments that all have the same physical address on each of the disks in the array (as the redeployment method A1 did).
      <br/>
      To redeploy the stripes, the same segments that would have been copied in method A1 are copied to new disk, but the rest of the segments remain where they are.
      <br/>
      New stripes are now formed by mapping the array of segments making up each file into stripes that contain a segment from each of the disks in the array.
      <br/>
      Free stripes are created out of the segments that were copied to the new disks.
      <br/>
      As with the first method, redeployment takes place on a file-by-file basis.
    </p>
    <p num="118">This method requires a map of segments, rather than just a map of stripes, for each file, which takes more space to store and is slower to resolve to a disk address.</p>
    <p num="119">
      However, this method is considerably more fault-tolerant than the first method.
      <br/>
      This is because the redeployment can take place in two distinct phases.
      <br/>
      First, all of the appropriate segments are moved to the new disk.
      <br/>
      This phase takes a long time, which makes it more vulnerable to failure.
      <br/>
      Second, the new segment map is computed and written to disk.
      <br/>
      This phase is extremely short.
      <br/>
      The array is only vulnerable to failure during the second phase, which is very easy to log and recover from.
      <br/>
      If the system crashes during the first phase, the first phase can merely be repeated from the beginning with no ill effects.
    </p>
    <p num="120">
      Consider the following example shown in FIGS. 13A, 13B and 13C.
      <br/>
      FIG. 13A illustrates an original array comprising two disks (disk 1 and disk 2).
      <br/>
      This disk array is expanded to have three disks (disk 1, disk 2, and disk 3).
    </p>
    <p num="121">
      As shown in FIG. 13A, a group of segments (segments 1 through 8) are cyclically striped across the two disks of the original disk array.
      <br/>
      The first redeployment method (Method A1) is shown in FIG. 13B. The segments are rearranged so that they are cyclically striped across the new expanded disk array.
      <br/>
      The second redeployment method is shown in FIG. 13C. In this case, only segments 3 and 6 are moved to disk 3 and the remaining segments stay in the same locations.
      <br/>
      Note that any three consecutive segments are spread over the three disks, but three consecutive segments are not necessarily in three consecutive disks (e.g., segment 4--disk 2, segment 5--disk 1, segment 6 disk--3).
      <br/>
      This insures the load on the three disks is equal.
      <br/>
      In FIG. 13C, space for new data 400 is indicated by the shading.
    </p>
    <p num="122">
      The new disk array is operated according to any of the techniques described above (e.g., wide-array, short I/O and consumption cycle, dividing into sub-arrays, etc.).
      <br/>
      With this method it is possible to use the full streaming capacity of the wider-array; that is the number of streams that can be served increases according to the results obtained in FIG. 15.
    </p>
    <p num="123">
      It is possible to limit the increase in the cycle length (and hence the start-up latency) by using a smaller segment size. (Note that only submultiples of the original segment size should be considered to minimize the effort underlying redeployment.) For example, if Nnew =Nold, it is possible to redeploy the data onto the Nold +Nnew disk array using half the original segment size, thus keeping the stripe size the same as before, and keeping the cycle length the same.
      <br/>
      The same amount of data is consumed (or generated) by each stream, but the data is fetched from an array twice as wide, and in segments half the original size.
      <br/>
      In this case, the buffer requirement is also kept from increasing.
      <br/>
      Note however, that, with a smaller segment size, the increase in the maximum number of users that can be served is smaller than with the segment size. (See FIG. 15)
    </p>
    <p num="124">Recall that if the I/O throughput for all disks is not the same, then the disk with the smallest I/O throughput dictates the serving capacity of all other disks and thus of the disk array.</p>
    <p num="125">B. Adding New Disks Without Making Array Wider</p>
    <p num="126">(a) The new disks are added to the original array so as to form a "taller" array; i.e., increasing the number of stripe bins in the system, but keeping the width of the stripe bins the same.</p>
    <p num="127">
      (b) When this method of adding disks is used, the array is divided into sub-arrays for operation.
      <br/>
      The size Na of each sub-array in the new system is equal to the stripe size in the original system.
    </p>
    <p num="128">(c) Original stripes may be redeployed so as to be randomly spread over all existing bins, redeployed to be cyclically allocated to the sub-arrays or the original stripes may be left in their original locations and new data placed in the new stripe bins.</p>
    <p num="129">
      If the disk array originally had Nd disks and data was striped across the array, the number of disks may now be increased to Ns Nd, where Ns is the number of sub-arrays.
      <br/>
      However, the stripe size remains Nd segments and is not increased to Ns Nd segments.
      <br/>
      Similarly, the I/O and consumption/production cycles are Na S/Wbase.
    </p>
    <p num="130">A major advantage of this method is that the full storage capacity of the added disks can be used regardless of whether it is the same as or different from the original disks.</p>
    <p num="131">
      Given the random deployment of data stripes over all stripe bins (old and new), the number of I/O transactions that a particular disk has to perform in a cycle is random, and varies from cycle to cycle.
      <br/>
      In all cases, however the number of I/O transactions cannot exceed the number of users being served.
      <br/>
      Thus the maximum number of users that can be served is at least equal to the number that the old system could serve, provided that the new disks are at least as fast as the original ones. (Clearly, if they were slower, then a decrease in the serving capacity of the system would ensue).
      <br/>
      The maximum number of users that can be served in the new system may be larger than the original maximum, and is determined for a given probability that the number of I/O transactions scheduled for a disk get accomplished in the cycle. (For example, see the curves in FIG. 16 which show the increase in the number of users that can be served assuming that the new disks that are added are identical to the original ones.) The maximum number of users that can be served, however, cannot reach the value obtained with a wide array long cycle technique (e.g., cycle length equal to Ntotal S/Wbase) which utilizes the entire serving capacities of all disks, old and new.
      <br/>
      The redeployment techniques which may be used with this method are considered in greater detail below.
    </p>
    <p num="132">Redeployment Method B1</p>
    <p num="133">
      This redeployment technique assumes the goal of adding disks is merely to increase storage capacity, rather than getting more streams to run simultaneously.
      <br/>
      Instead of widening the array, the number of stripes in the existing array is increased by "stacking" some multiple of the original Nd disks to create an array with the same number of segments per stripe but more stripes.
      <br/>
      Each of the new stripe bins on the new disks is just added to the free list.
    </p>
    <p num="134">This method only requires a simple stripe map, rather than a larger and more complicated segment map, to locate segments on disk.</p>
    <p num="135">
      The stacking method is very robust because the only I/O required to redeploy is to append new stripe bins to the list of free stripe bins.
      <br/>
      This updating of the map is easy to make fault-tolerant.
    </p>
    <p num="136">Redeployment Method B2</p>
    <p num="137">
      This redeployment technique (B2) uses the same stacking algorithm employed in the first technique (B1), but it also assumes that some modest increase in the number of simultaneous streams is desired.
      <br/>
      To do this, the new drives are stacked, but then enough stripes from the old array are moved to the new parts of the array to guarantee a balanced load across all of the drives.
      <br/>
      Stripes that are copied are returned to the free list.
      <br/>
      To further guarantee even loading across the different stack elements, an equal portion of the stripes from each file must be copied.
      <br/>
      During redeployment, the structure of the free list is such that new stripes will be allocated evenly across the different stack elements.
    </p>
    <p num="138">The method for locating segments on disk is the same as method B1.</p>
    <p num="139">
      Redeployment using this method has the same fault-tolerance characteristics as method A2: There is a long first phase of activity where stripes are being copied from one part of the stack to another.
      <br/>
      If this operation fails, it is easy just to start over.
      <br/>
      The second phase, updating the stripe map, is short in duration and easy to log to ensure fault tolerance.
    </p>
    <p num="140">
      The redeployment techniques B1 and B2 are illustrated in FIGS. 14A, 14B, and 14C.
      <br/>
      FIG. 14A illustrates an array of Nold =2 disks (disk 1 and disk 2).
      <br/>
      The height (i.e., number of stripe bins) of the disks is H. Six segments labeled 1, 2, 3, 4, 5, 6 are shown as cyclically striped across the array.
      <br/>
      FIG. 14B shows how the capacity of the array is expanded by adding additional disks 3 and 4.
      <br/>
      Disk 3 and disk 4 are added in a way to increase the height (i.e., number of stripe bins) from H to H', but the width Nold of the array remains the same.
    </p>
    <p num="141">
      There are two ways that data can be redeployed across the entire system (new and old disks).
      <br/>
      The first way as shown in FIG. 14B is to keep all the old data in the old disks and just put the new data in the new disks.
      <br/>
      The problem with this technique is that the load is not balanced across all disks because the stripes are not randomly distributed across all stripe bins.
    </p>
    <p num="142">This problem is corrected in the arrangement of FIG. 14C wherein the data from the old disk is distributed across the entire system so that there is a balanced load across all of the disks.</p>
    <p num="143">
      Note that the cycle length in this method does not increase, and is limited by the slowest disk in the system.
      <br/>
      Hence, one advantage with this method is the bound on latency.
    </p>
    <p num="144">
      If the new disks have a different capacity than the old ones, since the stripes are randomly spread over all bins, the frequency of access to the new disks is also different from that of the old disks.
      <br/>
      For example, if the new disks are twice as large as the old ones, then they are twice as likely to be accessed.
      <br/>
      Accordingly, the maximum number of users that can be served with a given probability of success is dependent on both the storage capacity and the bandwidth of the new disks in relation to the old ones.
    </p>
    <p num="145">Numerical Results</p>
    <p num="146">
      In FIG. 15 there is plotted two sets of curves.
      <br/>
      The first set corresponds to the maximum number of streams that can be served as a function of the segment size for different number of disks Nd and when data is striped across all disks and when I/O and consumption cycles are Nd S/Wbase.
      <br/>
      The second set of curves corresponds to a constant stripe size, which is directly related to the cycle length and thus the latency.
    </p>
    <p num="147">For a given number of disks, the number of streams that can be served increases with the segment size, and so does the stripe size and thus the latency.</p>
    <p num="148">For a given segment size, the number of streams that can be served increases with the number of disks, and so does the cycle length and thus the latency.</p>
    <p num="149">
      Moving along a constant stripe contour, one sees the increase in the number of streams as a result of increasing the number of disks and decreasing accordingly the size of segments so as to maintain the cycle length constant.
      <br/>
      Note that, for a given increase in the number of disks, the increase in the number of streams maintaining the stripe size the same is not as large as the increase in the number of streams maintaining the segment size the same.
      <br/>
      Thus there is a penalty for having to maintain the cycle length the same.
    </p>
    <p num="150">
      In FIG. 16, we consider the Sub-Array-Short I/O and Consumption Cycles Method with random allocation of data stripes to stripe bins, and plot the number of streams that can be supported for a given probability of success as a function of the number of sub-arrays that are stacked up.
      <br/>
      In this figure, it is assumed that all sub-arrays are identical.
      <br/>
      Each curve corresponds to a given streaming capacity for a single sub-array.
      <br/>
      From this figure, it is possible to see that, for example, if the streaming capacity of one sub-array is 50 streams, then with two such arrays, the number of streams is increased from 50 to about 65, and with 4 such arrays, the number of streams is increased to about 115, all with a probability of missing serving all requests in a cycle equal to 1 in 100,000 (1.0 e-5).
    </p>
    <p num="151">Reliability</p>
    <p num="152">
      In general, reliability in the event of a disk failure in an array is achieved through use of a parity disk.
      <br/>
      Consider the case of an array of Nd disks and where the data is striped across all disks.
      <br/>
      To provide protection in the event of a disk failure, a parity disk is provided.
      <br/>
      Each segment in the parity disk is derived by applying an XOR (exclusive-or) operation to the corresponding segments in all of the Nd disks.
      <br/>
      Thus, the first bit of segment i in the parity disk is generated by applying XOR to the first bit in segment i of each of-the Nd disks, etc.
    </p>
    <p num="153">
      The problem with using a single parity disk is that a lot of I/O's are needed in the event a disk failure requires use of the parity disk to reconstruct the segments in the failed disk.
      <br/>
      If one of the Nd disks fails, to reconstruct each segment in the failed disk, it is necessary to perform one I/O in each of the Nd -1 functioning disks and one I/O in the parity disk.
    </p>
    <p num="154">
      The number of I/O's may be reduced according to the present invention.
      <br/>
      Specifically, the array of Nd disks is divided into a plurality (e.g., 2) of subsets.
      <br/>
      There is one parity disk associated with each subset.
    </p>
    <p num="155">The segments in each parity disk are derived only from the corresponding segments of the disk in the associated subset.</p>
    <p num="156">
      Now the number of I/O operations used to reconstruct the segments of a failed disk is reduced.
      <br/>
      To reconstruct one segment of a failed disk in a subset, I/O transactions are performed only in the functioning disks in the subset and in the parity disk associated with the subset.
    </p>
    <p num="157">Conclusion</p>
    <p num="158">
      A method for operating an array of storage units such as an array of disks has been disclosed.
      <br/>
      The method permits the continuity of a plurality of simultaneous video data streams to be maintained.
    </p>
    <p num="159">
      It should be noted that different ones of the disclosed techniques can be used simultaneously in the same array of disks or other storage units.
      <br/>
      Consider an array of Nd disks.
      <br/>
      Different files can be striped across different numbers of disks.
      <br/>
      In general, a file is striped across Nd* disks, Nd* &lt;= Nd. I/O transactions are scheduled in a sequence of I/O cycles having a length Nc S/Wbase.
      <br/>
      If a stream has a bit rate Wbase, there are Nc I/O transactions of one segment each in each cycle.
      <br/>
      It should be noted that Nc may be greater than, equal to or smaller than Nd*. If Nc is equal to Nd*, there is one I/O transaction from each of the Nd* disks in a cycle for the stream.
      <br/>
      If Nc is greater than Nd*, there may be more than one I/O transaction from certain disks in a cycle.
      <br/>
      If Nc is smaller than Nd*, some of the Nd* disks will not be accessed in an I/O cycle.
      <br/>
      If the bit rate is smaller than Wbase, the stream has fewer than Nc I/O transactions in one I/O cycle.
      <br/>
      If the bit rate is larger than Wbase, the stream has more than Nc I/O transactions in one I/O cycle.
    </p>
    <p num="160">
      Finally, the above described embodiments of the invention are intended to be illustrative only.
      <br/>
      Numerous alternative embodiments may be devised by those skilled in the art without departing from the spirit and scope of the following claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for increasing the capacity of an array of Nd storage units onto which video data is stored and which is operated so that the continuity of a plurality of video streams is maintained, said video data being striped across said array so that Nd consecutive segments of S bits from a file are allocated one to each storage unit, said method comprising</claim-text>
      <claim-text>adding Nnew storage units to said array of Nd storage units to form a new array of Ntotal =Nd +Nnew storage units, and redeploying said data so that said data is striped across said new array of Ntotal storage units so that Ntotal consecutive segments from a file are allocated one to each of the Ntotal storage units,</claim-text>
      <claim-text>wherein only said segments which are to be stored in said new storage units are moved.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method for increasing the capacity of an array of original storage units having stripe bins of size Na segments of S bits onto which video data is stored and which is operated so that the continuity of a plurality of video streams is maintained, said method comprising the steps of (a) adding nNa additional storage units to said array to form a new array where n is an integer, and (b) deploying data in said new array so that the stripe bin size is unchanged.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2 wherein said deploying step comprises leaving existing data in the original storage units and adding new data to said new storage units in stripe bins of size Na segments.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 2 wherein said deploying step comprises randomly deploying stripes of Na segments of data from said original storage units over all of the stripe bins of Na segments in the original and new storage units.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 2 wherein said deploying step comprises cyclically deploying stripes of Na segments of data from said original storage units in subarrays of Na storage units in said new array.</claim-text>
    </claim>
  </claims>
</questel-patent-document>